<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Macre`s Blog🥝</title>
  
  
  <link href="https://macre.cn/atom.xml" rel="self"/>
  
  <link href="https://macre.cn/"/>
  <updated>2025-02-20T18:21:08.853Z</updated>
  <id>https://macre.cn/</id>
  
  <author>
    <name>Macre</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构线性表</title>
    <link href="https://macre.cn/posts/51394617.html"/>
    <id>https://macre.cn/posts/51394617.html</id>
    <published>2025-02-20T18:20:14.000Z</published>
    <updated>2025-02-20T18:21:08.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据结构-线性表">基本数据结构-线性表</h2><p>Macre算法系列笔记是综合 严卫敏《数据结构（c语言版）》书籍，以及考研408辅导讲义–王道408计算机考研的内容上，结合 罗永浩《算法竞赛》内容，加强编码能力和解决问题的实践能力。 感谢以上所提及的个人和机构对计算机教学领域做出的杰出贡献。（应该在有一定编程语言和调试能力下尽量去coding和调试！）。</p><p>可以作为数据结构与算法课程的实验去copy本内容代码！</p><p>先记录基本数据结构具体内容，算法应用在最后！</p><h3 id="一、线性表基本定义">一、线性表基本定义</h3><p>一个数据结构包含逻辑结构、存储结构以及作用在元素上的方法。</p><p>（1）逻辑结构</p><p>线性表（linear line）是最简单的数据结构。非空表记为D＝（a1, a2 , …, ai-1, ai , …, an)。用数学表达式表示为：<br>D =    { a i ∣ a i ∈ T , i = 1 , 2 , . . . , n , n ≥ 0 } D=\,\,\left\{ ai|ai∈T,i=1,2,…,n,n≥0 \right\} D={ ai∣ai∈T,i=1,2,…,n,n≥0}</p><p>其是一个有限序列，表中每个表项都是相继排列的，每两个相邻表象都有直接前驱和直接后继关系，也就是说，线性表中仅存在唯一的一个表头（haed）、唯一的一个表尾（tail）。这表明表中数据之间的关系是线性表中相邻的数据元素ai-1和ai之间存在序偶关系(ai-1, ai)，即ai-1是ai的前驱， ai是ai-1的后继；a1无前驱，an无后继，其它每个元素有且仅有一个前驱和一个后继。<br>R ＝ { &lt; a i − 1 , a i &gt; ∣ a i − 1 , a i ∈ D , i = 2 , . . . , n } R\text{＝}\left\{ &lt;a_{i-1},a_i&gt;|a_{i-1},a_i∈D,i=2,…,n \right\} R＝{ &lt;ai−1,ai&gt;∣ai−1,ai∈D,i=2,…,n}</p><p>（2）存储结构</p><p>主要是顺序存储和链式存储。</p><p>顺序存储：逻辑上相邻的元素在物理位置上也相邻。</p><p>链式存储：逻辑与物理存储位置无关。</p><p>（3）作用在次数据结构上的操作：</p><p>一个线性表内：元素的增加、删除、查找等；</p><p>线性表之间：合并、比较等</p><h3 id="二、顺序存储的线性表-顺序表-SQlist">二、顺序存储的线性表- 顺序表 SQlist</h3><p><img src="https://api.smain.cn/pics/pic_3c2af060.png" alt="pic_3c2af060.png"></p><p><img src="https://api.smain.cn/pics/pic_8aa786e2.png" alt="pic_8aa786e2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">typedef <span class="type">int</span> Elemtype; </span><br><span class="line">typedef <span class="type">int</span> Status;</span><br></pre></td></tr></table></figure><h4 id="2-1-静态数组">2.1 静态数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define Maxsize <span class="number">20</span></span><br><span class="line">typedef <span class="type">int</span> Status; </span><br><span class="line"><span class="comment">// 静态数组</span></span><br><span class="line">typedef struct Sqlsit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">     Elemtype data[Maxsize];</span><br><span class="line">     <span class="type">int</span> length;</span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure><h4 id="2-2-动态数组">2.2 动态数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    Elemtype *elem;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure><h4 id="2-3-方法">2.3 方法</h4><p>函数具体说明看函数里第一行注释！ 对于动态的！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">Sqlist <span class="title function_">initSqlist</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化函数</span></span><br><span class="line">    Sqlist L;</span><br><span class="line">    L.elem = (Elemtype *)malloc(Maxsize*sizeof(Elemtype));</span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;初始化失败！&quot;</span>);</span><br><span class="line">        exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.size = Maxsize;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">creatList</span><span class="params">(Sqlist *L,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">// </span></span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; L-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        Elemtype *<span class="keyword">new</span> = (Elemtype *)realloc(L-&gt;elem,L-&gt;size*<span class="number">2</span>*sizeof(Elemtype));</span><br><span class="line">        L-&gt;elem = <span class="keyword">new</span>;</span><br><span class="line">        L-&gt;size *=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用空白符结尾时，scanf会跳过空白符去读下一个字符，scanf在之前只读了10个数给数组初始化，后面必须多读一个数来作为结束信号，所以你必须再输入一个数。</span></span><br><span class="line">        <span class="comment">// 删除空格符号就可以</span></span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;L-&gt;elem[i]);</span><br><span class="line">        L-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">displayTable</span><span class="params">(Sqlist t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 打印展示 for循环打引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,t.elem[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">listinsert</span><span class="params">(Sqlist *L,<span class="type">int</span> i,Elemtype x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 插入 插入后整体往后移动一位。 L-&gt;elem[j+1] = L-&gt;elem[j];后一个等于其前一个。</span></span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length&gt;=L-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        Elemtype *<span class="keyword">new</span> = (Elemtype *)realloc(L-&gt;elem,sizeof(Elemtype)*L-&gt;size*<span class="number">2</span>);</span><br><span class="line">        L-&gt;size *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;请输入合法的位置！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> L-&gt;length-<span class="number">1</span>; j &gt;= i-<span class="number">1</span> ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;elem[j+<span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;elem[i-<span class="number">1</span>] = x;</span><br><span class="line">    L-&gt;length+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Listclear</span><span class="params">(Sqlist *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//清零</span></span><br><span class="line">    <span class="comment">//将length变为零后就没有办法通过length访问元素，相当于上进行清零的操作。</span></span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListDestory</span><span class="params">(Sqlist *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 销毁一个顺序表</span></span><br><span class="line">    free(L-&gt;elem);</span><br><span class="line">    <span class="comment">//释放后的无效指针必须置为空，不然会导致内存泄漏</span></span><br><span class="line">    L-&gt;elem =NULL;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    L-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(Sqlist L)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取长度</span></span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListEmpty</span><span class="params">(Sqlist L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">GetElem</span><span class="params">(Sqlist L,<span class="type">int</span> i,Elemtype *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt;L.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// *e = L.elem[i-1];</span></span><br><span class="line">    e = *(L.elem +i -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListDelete</span><span class="params">(Sqlist *L,<span class="type">int</span> i,Elemtype *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt; L-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 取这个位置上的指针</span></span><br><span class="line">    Elemtype *p  = &amp;(L-&gt;elem[i-<span class="number">1</span>]);</span><br><span class="line">    e= *p;</span><br><span class="line">    <span class="comment">// 取尾元素的指针</span></span><br><span class="line">    Elemtype *q = L-&gt;elem+L-&gt;length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (++p; p&lt;=q; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p-<span class="number">1</span>) = *p;</span><br><span class="line">    &#125;</span><br><span class="line">    --L-&gt;length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">cmp</span><span class="params">(Elemtype a,Elemtype b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(Sqlist L,Elemtype *e, Status (*cmp)</span><span class="params">(Elemtype,Elemtype)</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 找到与e相同的第一个元素，</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    Elemtype *p = L.elem;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= L.length &amp;&amp; !(*cmp)(*p++,*e)) ++i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L.length) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Union_1</span><span class="params">(Sqlist *L1,Sqlist L2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">L1_len</span> <span class="operator">=</span>L1-&gt;length , L2_len = ListLength(L2);</span><br><span class="line">    Elemtype *e;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= L2.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        <span class="comment">// GetElem(L2,i,e);</span></span><br><span class="line">        e = L2.elem+i-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!LocateElem(*L1,e,cmp)) listinsert(L1,++L1-&gt;length,*e);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void MergeList(Sqlist L1,Sqlist L2,Sqlist *L3)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     // *L3 = initSqlist();</span></span><br><span class="line"><span class="comment">//     int i= 1,j =1,k =0;</span></span><br><span class="line"><span class="comment">//     int len1 = ListLength(L1),len2 = ListLength(L2);</span></span><br><span class="line"><span class="comment">//     Elemtype *a,*b;</span></span><br><span class="line"><span class="comment">//     while ((i &lt;= len1)&amp;&amp;(j &lt;= len2))</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = L1.elem+i-1;</span></span><br><span class="line"><span class="comment">//         b = L2.elem+j-1;</span></span><br><span class="line"><span class="comment">//         if (*a &lt;= *b)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             listinsert(L3,++k,*a);</span></span><br><span class="line"><span class="comment">//             ++i;</span></span><br><span class="line"><span class="comment">//         &#125;else&#123;</span></span><br><span class="line"><span class="comment">//             listinsert(L3,++k,*b);</span></span><br><span class="line"><span class="comment">//             ++j;</span></span><br><span class="line"><span class="comment">//         &#125;    </span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     while (i&lt;=len1)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = L1.elem+i-1;</span></span><br><span class="line"><span class="comment">//         listinsert(L3,++k,*a);</span></span><br><span class="line"><span class="comment">//         ++i;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     while (j&lt;=len2)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         b = L2.elem+j-1;</span></span><br><span class="line"><span class="comment">//         listinsert(L3,++k,*b);</span></span><br><span class="line"><span class="comment">//         ++j;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     L3-&gt;length-=1;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">MergeListSq</span><span class="params">(Sqlist L1,Sqlist L2,Sqlist *L3)</span></span><br><span class="line">&#123;</span><br><span class="line">    Elemtype *p1 = L1.elem,*p2 = L2.elem;</span><br><span class="line">    L3-&gt;length = L1.length+L2.length;</span><br><span class="line">    L3-&gt;size = L3-&gt;length;</span><br><span class="line">    L3-&gt;elem = (Elemtype *)malloc(L3-&gt;size*sizeof(Elemtype));</span><br><span class="line">    Elemtype *P3 = L3-&gt;elem;</span><br><span class="line">    <span class="keyword">if</span> (!L3-&gt;elem) exit(<span class="number">0</span>);</span><br><span class="line">    Elemtype *p1_e = L1.elem+L1.length-<span class="number">1</span>,*p2_e =L2.elem+L2.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= p1_e &amp;&amp; p2 &lt;= p2_e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p1 &lt; *p2) *P3++ = *p1++;</span><br><span class="line">        <span class="keyword">else</span> *P3++ = *p2++; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= p1_e) *P3++ = *p1++;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= p2_e) *P3++ = *p2++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在main里调用和测试方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面加上</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Sqlist</span> <span class="variable">L</span> <span class="operator">=</span> initSqlist();</span><br><span class="line">    <span class="type">Sqlist</span> <span class="variable">L1</span> <span class="operator">=</span> initSqlist();</span><br><span class="line">    <span class="type">Sqlist</span> <span class="variable">L3</span> <span class="operator">=</span> initSqlist();</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用两个数组初始化线性表；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">        L.elem[i-<span class="number">1</span>] = a[i-<span class="number">1</span>];</span><br><span class="line">        L.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.elem[i-<span class="number">1</span>] = b[i-<span class="number">1</span>];</span><br><span class="line">        L1.length++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    displayTable(L);</span><br><span class="line">    displayTable(L1);</span><br><span class="line">    MergeListSq(L,L1,&amp;L3);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、链式存储的线性表-单链表-Linklist">三、链式存储的线性表-单链表 Linklist</h3><p><img src="https://api.smain.cn/pics/pic_d39dd97e.png" alt="pic_d39dd97e.png"></p><h4 id="3-1-静态链表">3.1 静态链表</h4><p>![外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传]<img src="https://api.smain.cn/pics/pic_9096f822.png" alt="pic_9096f822.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define Maxsize <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">typedef <span class="type">int</span> Elemtype;</span><br><span class="line"></span><br><span class="line">typedef struct&#123;</span><br><span class="line">    Elemtype data;</span><br><span class="line">    <span class="type">int</span> cur; <span class="comment">// 游标 指示下一个</span></span><br><span class="line">&#125;node,SlinkList[Maxsize];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-动态链表">3.2 动态链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef <span class="type">int</span> Elemtype;</span><br><span class="line">typedef <span class="type">int</span> Status;</span><br><span class="line">typedef struct </span><br><span class="line">&#123;</span><br><span class="line">    Elemtype data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line"></span><br><span class="line">&#125;LNode,*Linklist;</span><br></pre></td></tr></table></figure><h4 id="3-3-方法">3.3 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">List_headInsert</span><span class="params">(Linklist *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 头插法建立单链表 带头结点</span></span><br><span class="line">    <span class="comment">// 传入的是一个指向指针变量的指针</span></span><br><span class="line">    LNode *s; Elemtype x;</span><br><span class="line">    (*L) = (Linklist)malloc(sizeof(LNode));</span><br><span class="line">    (*L)-&gt;next = NULL;</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x!= <span class="number">9999</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (LNode *)malloc(sizeof(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = (*L)-&gt;next;</span><br><span class="line">        (*L)-&gt;next = s;</span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">List_tailInsert</span><span class="params">(Linklist *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 尾插法建立单链表 带头结点</span></span><br><span class="line">    Elemtype x;</span><br><span class="line">    (*L) = (Linklist)malloc(sizeof(LNode));</span><br><span class="line">    LNode *s,*r = (*L);</span><br><span class="line">    scanf(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">9999</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (Linklist)malloc(sizeof(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LNode *Getelem_ID(LNode L,<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 按序号查找</span></span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span>) <span class="keyword">return</span> NULL;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    LNode *p = L.next;</span><br><span class="line">    <span class="keyword">while</span> (p!= NULL &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LNode *Getelem_V(LNode L,Elemtype x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 指向首元素</span></span><br><span class="line">    LNode *p = L.next; </span><br><span class="line">    <span class="keyword">while</span> (p!= NULL &amp;&amp; p-&gt;data != x) p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">showList</span><span class="params">(LNode L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">j</span> <span class="operator">=</span> L.next;</span><br><span class="line">    <span class="keyword">while</span>(j)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,j-&gt;data);</span><br><span class="line">        j = j-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListInsert_L</span><span class="params">(Linklist *L,<span class="type">int</span> i,Elemtype x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在第i个位置之前插入x；</span></span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">p</span> <span class="operator">=</span> *L;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( p &amp;&amp; j&lt;i-<span class="number">1</span>) &#123; </span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( !p || j &gt;i-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//第i个位置的节点不存在</span></span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">s</span> <span class="operator">=</span> (Linklist)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ListDelete</span><span class="params">(Linklist *L,<span class="type">int</span> i,Elemtype *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 删除第i个位置的元素</span></span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">p</span> <span class="operator">=</span> *L;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j&lt;i-<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p-&gt;next) || j&gt;i-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">q</span> <span class="operator">=</span> p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    *e = q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有错误</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">MergeList</span><span class="params">(Linklist L1,Linklist L2,Linklist *L3)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">p1</span> <span class="operator">=</span> L1-&gt;next, p2 = L2-&gt;next;</span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">p3</span> <span class="operator">=</span> *L3;</span><br><span class="line">    p3-&gt;next = NULL;</span><br><span class="line">    <span class="keyword">while</span> (p1 &amp;&amp; p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;data &lt;= p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;next = p1;p3 = p1;p1 = p1-&gt;next;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p3-&gt;next = p2;p3 = p2; p2 = p2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p3-&gt;next = p1 ? p1 : p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，运行时输入值，输入9999 时推出插入，采用头差，也可以采用尾插。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Linklist L;</span><br><span class="line">    Linklist L1;</span><br><span class="line">    List_headInsert(&amp;L);</span><br><span class="line">    <span class="type">Linklist</span> <span class="variable">k</span> <span class="operator">=</span> L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,k-&gt;data);</span><br><span class="line">        k = k-&gt;next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、算法应用">四、算法应用</h3><h5 id="约瑟夫问题">约瑟夫问题</h5><p>题目：n个人围成一圈，初始编号从1~n排列，从约定编号为x的人开始报数，数到第m个人出圈，接着又从1开始报数，报到第m个数的人又退出圈，以此类推，最后圈内只剩下一个人，这个人就是赢家，求出赢家的编号。</p><h5 id="（1）动态链表">（1）动态链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">struct node&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    struct node * next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 处理输入输出</span></span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="comment">// 初始化动态链表</span></span><br><span class="line">    node *head,*now,*p,*prev;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="title class_">node</span>;</span><br><span class="line">    head-&gt;data = <span class="number">1</span>; head-&gt;next = NULL;</span><br><span class="line">    now = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">node</span>; p-&gt;data = i; p-&gt;next = NULL;</span><br><span class="line">        now-&gt;next = p;</span><br><span class="line">        now = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环链表，头尾链接起来</span></span><br><span class="line">    now-&gt;next = head;</span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   now = head;</span><br><span class="line">   prev = head;</span><br><span class="line">   <span class="keyword">while</span>((n--)&gt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">        prev = now;</span><br><span class="line">        now = now-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d &quot;</span>,now-&gt;data);</span><br><span class="line">    prev-&gt;next = now-&gt;next;</span><br><span class="line">    delete now;</span><br><span class="line">    now = prev-&gt;next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 由于最后一个已经是确定的了，所以只要最后输出一个而不是再循环m次,所以循环只到1；</span></span><br><span class="line">   printf(<span class="string">&quot;%d &quot;</span>,now-&gt;data);</span><br><span class="line">   delete now;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（2）-静态链表">（2） 静态链表</h5><p>结构体数组单向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">const <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">105</span>; <span class="comment">// 要在全局声明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体数组单向链表</span></span><br><span class="line">struct node&#123;</span><br><span class="line">    <span class="type">int</span> id,nextid;</span><br><span class="line">&#125;nodes[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    nodes[<span class="number">0</span>].id = <span class="number">0</span>;nodes-&gt;nextid  =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n; i++)&#123;nodes[i].id = i;nodes[i].nextid = i+<span class="number">1</span>;&#125;</span><br><span class="line">    nodes[n].nextid =<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> now=<span class="number">1</span>;<span class="type">int</span> <span class="variable">prve</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((n--) &gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            prve = nodes[now].id;</span><br><span class="line">            now = nodes[now].nextid;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,nodes[now].id);</span><br><span class="line">        nodes[prve].nextid = nodes[now].nextid;</span><br><span class="line">        now = nodes[prve].nextid;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d &quot;</span>,nodes[now].id);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体数组双向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">const <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">105</span>;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="comment">// int data;</span></span><br><span class="line">    <span class="type">int</span> preid,nextid;</span><br><span class="line">&#125;nodes[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    nodes[<span class="number">0</span>].nextid=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        nodes[i].id= i;</span><br><span class="line">        nodes[i].preid = i-<span class="number">1</span>;</span><br><span class="line">        nodes[i].nextid = i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nodes[<span class="number">1</span>].preid = n;</span><br><span class="line">    nodes[n].nextid = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> prev,nextv;</span><br><span class="line">    <span class="keyword">while</span> ((n--)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) now = nodes[now].nextid;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,nodes[now].id);</span><br><span class="line">        prev = nodes[now].preid;</span><br><span class="line">        nextv = nodes[now].nextid;</span><br><span class="line">        nodes[prev].nextid = nodes[nextv].id;</span><br><span class="line">        nodes[nextv].preid = nodes[prev].id;</span><br><span class="line">        now = nextv;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d &quot;</span>,nodes[now].id);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组单向链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[<span class="number">150</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n ; i ++) A[i] = i+<span class="number">1</span>;</span><br><span class="line">    A[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">now</span> <span class="operator">=</span><span class="number">1</span>;<span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((n--)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; m; i++)&#123;</span><br><span class="line">            prev = now;</span><br><span class="line">            now = A[now];</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">        A[prev] = A[now];</span><br><span class="line">        now = A[prev];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）STL-list">（3）STL list</h5><p>以后更新博客！</p><p>s[now].nextid;<br>nodes[prev].nextid = nodes[nextv].id;<br>nodes[nextv].preid = nodes[prev].id;<br>now = nextv;<br>}<br>printf(&quot;%d &quot;,nodes[now].id);<br>return 0;</p><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">数组单向链表：</span><br><span class="line"></span><br><span class="line">~~~C++</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[<span class="number">150</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n ; i ++) A[i] = i+<span class="number">1</span>;</span><br><span class="line">    A[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">now</span> <span class="operator">=</span><span class="number">1</span>;<span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((n--)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; m; i++)&#123;</span><br><span class="line">            prev = now;</span><br><span class="line">            now = A[now];</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">        A[prev] = A[now];</span><br><span class="line">        now = A[prev];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">&quot;%d &quot;</span>,now);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）STL-list-2">（3）STL list</h5><p>以后更新博客！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本数据结构-线性表&quot;&gt;基本数据结构-线性表&lt;/h2&gt;
&lt;p&gt;Macre算法系列笔记是综合 严卫敏《数据结构（c语言版）》书籍，以及考研408辅导讲义–王道408计算机考研的内容上，结合 罗永浩《算法竞赛》内容，加强编码能力和解决问题的实践能力。 感谢以上所提及的</summary>
      
    
    
    
    <category term="算法" scheme="https://macre.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线性表" scheme="https://macre.cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="数据结构" scheme="https://macre.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="c" scheme="https://macre.cn/tags/c/"/>
    
    <category term="c++" scheme="https://macre.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>硬件esp32开发板</title>
    <link href="https://macre.cn/posts/eb50624.html"/>
    <id>https://macre.cn/posts/eb50624.html</id>
    <published>2024-07-20T18:39:23.000Z</published>
    <updated>2025-02-20T18:42:39.124Z</updated>
    
    <content type="html"><![CDATA[<p>根据esp技术说明书，设计pcb板子！</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/esp/esp1.png" alt=""><br><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/esp/esp2.png" alt=""><br><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/esp/esp3.png" alt=""><br><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/esp/esp4.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据esp技术说明书，设计pcb板子！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/esp/esp1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;img src=&quot;https</summary>
      
    
    
    
    <category term="硬件" scheme="https://macre.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="esp32" scheme="https://macre.cn/tags/esp32/"/>
    
    <category term="硬件" scheme="https://macre.cn/tags/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="pcb" scheme="https://macre.cn/tags/pcb/"/>
    
  </entry>
  
  <entry>
    <title>SVM-news</title>
    <link href="https://macre.cn/posts/488e438a.html"/>
    <id>https://macre.cn/posts/488e438a.html</id>
    <published>2024-03-31T17:47:54.000Z</published>
    <updated>2025-02-20T18:08:18.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原始数据介绍">一、原始数据介绍</h2><p><strong>数据集描述</strong><br>本次课程设计使用的数据集来自《赫芬顿邮报》2012年至2022年的新闻标题，包含约210k条新闻记录。该数据集是最大的新闻数据集之一，适用于多种自然语言处理任务。数据集可在Kaggle上获取。</p><p><strong>数据字段</strong></p><ul><li><strong>category</strong>: 新闻的类别，数据集中包含42个类别。</li><li><strong>headline</strong>: 新闻标题。</li><li><strong>authors</strong>: 文章作者列表。</li><li><strong>link</strong>: 原始新闻文章的链接。</li><li><strong>short_description</strong>: 新闻摘要。</li><li><strong>date</strong>: 文章发布日期。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/1.png" alt=""></p><p><strong>数据分布</strong><br>通过对类别进行统计分析，发现“POLITICS”类别的文章数量最多。以下是类别分布的直方图代码：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设df是包含&#x27;category&#x27;列的DataFrame</span></span><br><span class="line">plt.figure(figsize=(<span class="number">25</span>, <span class="number">15</span>))</span><br><span class="line">cmapper = plt.cm.tab20.colors  <span class="comment"># 使用丰富的颜色映射</span></span><br><span class="line">ax = df[<span class="string">&#x27;category&#x27;</span>].value_counts().sort_values(ascending=<span class="literal">False</span>).plot.bar(color=cmapper, legend=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加数值标签</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(ax.patches):</span><br><span class="line">    ax.text(i, v.get_height(), <span class="built_in">str</span>(v.get_height()), ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">50</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;新闻种类&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;文章数量&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;新闻种类与文章数量分布图&quot;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>选择标题和简介作为文本内容以及文本新闻标题作为最后的数据集，用文本内容来分类文章分类。</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/3.png" alt=""></p><p><strong>词云展示</strong><br>为了进一步分析各类新闻的文本特征，生成了词云。以下是词云的代码：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/4.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成全局词云</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line">wc = WordCloud(max_words=<span class="number">1000</span>, background_color=<span class="string">&#x27;white&#x27;</span>, colormap=<span class="string">&#x27;viridis&#x27;</span>, stopwords=STOPWORDS).generate(<span class="string">&#x27; &#x27;</span>.join(final_df[<span class="string">&#x27;category&#x27;</span>]))</span><br><span class="line">plt.imshow(wc, interpolation=<span class="string">&quot;bilinear&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;41个文章类型的词云&quot;</span>, size=<span class="number">20</span>, weight=<span class="string">&#x27;bold&#x27;</span>, color=<span class="string">&#x27;black&#x27;</span>, y=<span class="number">1.05</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/5.png" alt=""></p><h2 id="二、数据预处理">二、数据预处理</h2><p><strong>数据清洗</strong><br>在数据预处理阶段，我们首先检查数据的完整性，发现数据集中并无空值，因此无需进行补齐或删除操作。</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/6.png" alt=""></p><p>接下来，我们对文本数据进行了清洗，去除了无关符号和停用词。以下是清洗代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> WordNetLemmatizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">datacleaning</span>(<span class="params">text</span>):</span><br><span class="line">    whitespace = re.<span class="built_in">compile</span>(<span class="string">r&quot;\s+&quot;</span>)</span><br><span class="line">    user = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?i)@[a-z0-9_]+&quot;</span>)</span><br><span class="line">    text = whitespace.sub(<span class="string">&#x27; &#x27;</span>, text)</span><br><span class="line">    text = user.sub(<span class="string">&#x27;&#x27;</span>, text)</span><br><span class="line">    text = re.sub(<span class="string">r&quot;\[[^()]*\]&quot;</span>, <span class="string">&quot;&quot;</span>, text)</span><br><span class="line">    text = re.sub(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;&quot;</span>, text)</span><br><span class="line">    text = re.sub(<span class="string">r&#x27;[^\w\s]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, text)</span><br><span class="line">    text = re.sub(<span class="string">r&quot;(?:@\S*|#\S*|http(?=.*://)\S*)&quot;</span>, <span class="string">&quot;&quot;</span>, text)</span><br><span class="line">    text = text.lower()</span><br><span class="line">    text = [word <span class="keyword">for</span> word <span class="keyword">in</span> text.split() <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords.words(<span class="string">&#x27;english&#x27;</span>)]</span><br><span class="line">    sentence = []</span><br><span class="line">    lemmatizer = WordNetLemmatizer()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> text:</span><br><span class="line">        sentence.append(lemmatizer.lemmatize(word, <span class="string">&#x27;v&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(sentence)</span><br></pre></td></tr></table></figure><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/7.png" alt=""></p><p><strong>文本向量化</strong><br>为了将文本数据转换为模型可处理的格式，我们选择了TF-IDF向量化方法。TF-IDF能够反映单词在文档集合中的重要性，适用于文本分类任务。以下是向量化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line">vectorizer = TfidfVectorizer(min_df=<span class="number">0.0</span>, max_df=<span class="number">1.0</span>, ngram_range=(<span class="number">1</span>, <span class="number">2</span>), sublinear_tf=<span class="literal">True</span>)</span><br><span class="line">X = vectorizer.fit_transform(summary_df[<span class="string">&#x27;length_of_news&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>数据集划分</strong><br>我们将数据集划分为训练集和测试集，测试集占比为20%。以下是划分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">length_of_news_train, length_of_news_test, category_train, category_test = train_test_split(length_of_news, category, test_size=<span class="number">0.2</span>, random_state=<span class="number">41</span>)</span><br></pre></td></tr></table></figure><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/8.png" alt=""></p><h2 id="三、模型评估标准">三、模型评估标准</h2><p>在模型评估中，我们引入了混淆矩阵（Confusion Matrix）作为主要评估工具。混淆矩阵通过展示模型预测结果与实际标签之间的关系，能够直观地反映模型的分类性能。主对角线上的值表示正确分类的样本数量，非对角线上的值表示错误分类的样本数量。</p><h2 id="四、模型训练">四、模型训练</h2><p><strong>支持向量机（SVM）</strong><br>我们使用SVM作为分类模型，并尝试了三种不同的核函数：线性核、多项式核和高斯核（RBF核）。以下是模型训练代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tv_X_train.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    X_train = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tv_y_train.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    y_train = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tv_X_test.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    X_test = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tv_y_test.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    y_test = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练SVM分类器</span></span><br><span class="line">classifier = SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="string">&#x27;scale&#x27;</span>, probability=<span class="literal">True</span>)</span><br><span class="line">classifier.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p><strong>模型性能分析</strong></p><ul><li><strong>线性核SVM</strong>：适用于线性可分的数据集。测试结果显示，该数据集具有一定的非线性特征。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/9.png" alt=""></p><ul><li><strong>多项式核SVM</strong>：能够处理非线性数据，通过调整多项式核的阶数和系数，性能有所提升。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/10.png" alt=""></p><ul><li><strong>高斯核SVM</strong>：通过调整γ参数，能够更好地适应数据的复杂性。测试结果显示，相比于多项式核，性能有所提升，但提升幅度有限。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmnews/11.png" alt=""></p><h2 id="五、模型结果与分析">五、模型结果与分析</h2><p><strong>分类效果</strong><br>在所有类别中，“QUEER VOICES”类别的分类效果最好，而“WELLNESS”类别的分类效果最差，其与“HEALTHY LIVING”类别的误判率较高。这可能是因为“QUEER VOICES”具有较为独特的特征，而“WELLNESS”和“HEALTHY LIVING”在特征空间中较为接近，难以区分。</p><p><strong>核函数与参数优化</strong><br>核函数的选择及其参数对模型性能有显著影响。多项式核和高斯核的参数优化是提升模型性能的关键。例如，γ参数在高斯核中控制决策边界的复杂度，过高或过低的γ值都会影响模型性能。</p><p><strong>未来工作</strong><br>未来，我们将探索深度学习技术，如循环神经网络（RNN）和卷积神经网络（CNN），以进一步提升新闻分类的准确率。同时，提高模型的可解释性也是我们的研究重点，这将帮助我们更好地理解模型的决策机制。</p><p>此外，我们的模型可以应用于新闻内容推荐系统，通过自动化的新闻分类提高推荐的准确性和相关性。</p><h2 id="六、总结">六、总结</h2><p>本次课程设计成功实现了新闻分类的目标，并深入分析了核函数选择和参数优化对模型性能的影响。未来，我们将继续探索深度学习技术，推动新闻分类技术的进步。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、原始数据介绍&quot;&gt;一、原始数据介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数据集描述&lt;/strong&gt;&lt;br&gt;
本次课程设计使用的数据集来自《赫芬顿邮报》2012年至2022年的新闻标题，包含约210k条新闻记录。该数据集是最大的新闻数据集之一，适用于多种自然语言处理</summary>
      
    
    
    
    <category term="机器学习" scheme="https://macre.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://macre.cn/tags/python/"/>
    
    <category term="SVM" scheme="https://macre.cn/tags/SVM/"/>
    
    <category term="支持向量机" scheme="https://macre.cn/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    
    <category term="机器学习" scheme="https://macre.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MINIST之SVM</title>
    <link href="https://macre.cn/posts/a641b908.html"/>
    <id>https://macre.cn/posts/a641b908.html</id>
    <published>2024-03-01T17:44:22.000Z</published>
    <updated>2025-02-20T18:11:58.995Z</updated>
    
    <content type="html"><![CDATA[<h1>MINIST——SVM</h1><h2 id="一、-原始数据介绍">一、 原始数据介绍</h2><p><strong>MNIST数据集</strong>是一个广泛用于机器学习和计算机视觉领域的经典手写数字识别数据集。该数据集由美国国家标准与技术研究所（NIST）发起整理，包含大量手写数字图像，被广泛应用于各种算法的测试和评估。MNIST数据集的规模和多样性使其成为机器学习和深度学习算法的重要基准测试数据集。</p><p>MNIST数据集的下载和使用非常简便，官方网站提供了四个文件的下载：训练集图像、训练集标签、测试集图像和测试集标签。这些文件以字节形式存储，需通过特定程序读取。</p><ul><li><strong>下载地址</strong>：<a href="https://yann.lecun.com/exdb/mnist/">MNIST数据集</a></li></ul><p>以下是加载数据的关键代码：</p><h3 id="1-1解析图片的代码">1.1解析图片的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_image</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 用二进制读取</span></span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;iiii&#x27;</span></span><br><span class="line">    magic_number, num_images, num_rows, num_cols = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;魔数: <span class="subst">&#123;magic_number&#125;</span>, 图片数量: <span class="subst">&#123;num_images&#125;</span>张, 图片大小: <span class="subst">&#123;num_rows&#125;</span>*<span class="subst">&#123;num_cols&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    image_size = num_rows * num_cols</span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;&#x27;</span> + <span class="built_in">str</span>(image_size) + <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    images = np.empty((num_images, num_rows, num_cols))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用tqdm添加进度条</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num_images), desc=<span class="string">&#x27;解析图片&#x27;</span>):</span><br><span class="line">        images[i] = np.array(struct.unpack_from(fmt_image, data, offset)).reshape((num_rows, num_cols))</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> images</span><br></pre></td></tr></table></figure><h3 id="1-2解析标签的代码">1.2解析标签的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_label</span>(<span class="params">path</span>):</span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;ii&#x27;</span></span><br><span class="line">    magic_number, num_images = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;魔数: <span class="subst">&#123;magic_number&#125;</span>, 图片数量: <span class="subst">&#123;num_images&#125;</span>张&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;B&#x27;</span></span><br><span class="line">    labels = np.empty(num_images)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用tqdm添加进度条</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(num_images), desc=<span class="string">&#x27;解析标签&#x27;</span>):</span><br><span class="line">        labels[i] = struct.unpack_from(fmt_image, data, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/1.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/2.png" alt=""></p><ul><li>MNIST数据集包含70,000张28x28像素的手写数字灰度图像，分为训练集和测试集两部分：<ul><li><strong>训练集</strong>：60,000张图像</li><li><strong>测试集</strong>：10,000张图像</li></ul></li><li>每个图像对应一个标签，标签范围为0到9，表示图像中的手写数字。</li><li>每张图像由28x28个像素点构成，每个像素点用一个灰度值表示，灰度值介于0到255之间。</li></ul><p><strong>数据分类统计</strong>：</p><ul><li>数据集包含10个类别（0-9），各类别的数字分布如下图所示。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/3.png" alt=""></p><p><strong>部分数据可视化</strong>：</p><ul><li>数据集中的部分图像示例如下图所示。</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/4.png" alt=""></p><h2 id="二、-数据预处理（数据准备）">二、 数据预处理（数据准备）</h2><h3 id="2-1-像素级分布统计分析">2.1 像素级分布统计分析</h3><p>首先对每个数字标识的图像样本进行了像素级的分布统计分析。基于统计结果，采用热图这一可视化工具来展示像素值的分布情况。热图通过颜色编码的方式直观地表示数据的密集程度，其中颜色的深浅变化对应于数据分布的密集与稀疏。</p><p><strong>热图绘制代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_heatmaps</span>(<span class="params">dist</span>):</span><br><span class="line">    num_classes = dist.shape[<span class="number">0</span>]</span><br><span class="line">    num_rows = dist.shape[<span class="number">1</span>]</span><br><span class="line">    num_cols = dist.shape[<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建子图</span></span><br><span class="line">    fig, axes = plt.subplots(nrows=num_classes, ncols=<span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">2</span> * num_classes))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果只有一张图，axes不是数组，需要将其转换为数组</span></span><br><span class="line">    <span class="keyword">if</span> num_classes == <span class="number">1</span>:</span><br><span class="line">        axes = [axes]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_classes):</span><br><span class="line">        ax = axes[i]</span><br><span class="line">        <span class="comment"># 绘制热图</span></span><br><span class="line">        im = ax.imshow(dist[i], cmap=<span class="string">&#x27;hot&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line">        ax.set_title(<span class="string">f&#x27;Class <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">        ax.axis(<span class="string">&#x27;off&#x27;</span>)  <span class="comment"># 不显示坐标轴</span></span><br><span class="line">        <span class="comment"># 添加颜色条</span></span><br><span class="line">        fig.colorbar(im, ax=ax)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/5.png" alt=""></p><p><strong>分析结果</strong>：</p><ul><li>热图显示图像数据的像素分布呈现出一定的规律性，未发现显著的异常数据点。</li><li>数据集中的图像样本在像素分布上具有较高的一致性和稳定性，无需进行额外的数据清洗步骤。</li></ul><h3 id="2-2-数据展平">2.2 数据展平</h3><p>在图像识别任务中，原始图像通常以二维数组的形式存在，而大多数机器学习算法要求输入数据为一维向量形式。因此，将二维图像数据展平成一维向量是实现算法输入要求的前提。对于一个28x28的图像，其包含784个像素点，数据展平操作即将这些像素点的值从二维结构中释放出来，重新组织成一个长度为784的一维数组。</p><p><strong>数据展平代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">test_images = test_images.reshape(test_images.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="2-3-特征缩放">2.3 特征缩放</h3><p>特征缩放（Feature Scaling）是数据预处理的关键环节，对模型的性能和训练效率具有显著影响。本研究采用Z-score标准化（Standard Scaling）方法，对像素值进行特征缩放，以期达到均值为0，方差为1的标准化效果。这种转换有助于消除不同像素值之间的量纲差异，使得模型能够更加关注于特征之间的相对关系，而非其绝对大小。</p><p><strong>特征缩放代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">selected_train_images = scaler.fit_transform(selected_train_images)</span><br><span class="line">selected_test_images = scaler.transform(selected_test_images)</span><br></pre></td></tr></table></figure><h3 id="2-4-数据裁剪">2.4 数据裁剪</h3><p>为了减少模型训练的时间复杂度，同时保持数据集的代表性，本研究对原始数据集进行了裁剪。具体而言，对于每个类别，随机选取1000个训练样本，组成一个包含10,000个样本的训练集；对于测试集，从每个类别中随机选取100个样本，组成一个包含1,000个样本的测试集。</p><p><strong>划分数据集代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">unique_labels = np.unique(train_labels)</span><br><span class="line">selected_train_images = []</span><br><span class="line">selected_train_labels = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> unique_labels:</span><br><span class="line">    label_indices = np.where(train_labels == label)[<span class="number">0</span>]</span><br><span class="line">    selected_indices = np.random.choice(label_indices, <span class="number">1000</span>, replace=<span class="literal">False</span>)</span><br><span class="line">    selected_train_images.extend(train_images[selected_indices])</span><br><span class="line">    selected_train_labels.extend(train_labels[selected_indices])</span><br><span class="line"></span><br><span class="line">selected_test_images = []</span><br><span class="line">selected_test_labels = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> unique_labels:</span><br><span class="line">    label_indices = np.where(test_labels == label)[<span class="number">0</span>]</span><br><span class="line">    selected_indices = np.random.choice(label_indices, <span class="number">100</span>, replace=<span class="literal">False</span>)</span><br><span class="line">    selected_test_images.extend(test_images[selected_indices])</span><br><span class="line">    selected_test_labels.extend(test_labels[selected_indices])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为numpy数组</span></span><br><span class="line">selected_train_images = np.array(selected_train_images)</span><br><span class="line">selected_train_labels = np.array(selected_train_labels)</span><br><span class="line">selected_test_images = np.array(selected_test_images)</span><br><span class="line">selected_test_labels = np.array(selected_test_labels)</span><br></pre></td></tr></table></figure><h2 id="三、模型评估标准介绍">三、模型评估标准介绍</h2><p>在现实世界的应用中，机器学习模型的性能评估需要在捕获少数类的能力与将多数类错误分类的代价之间寻找平衡。一个优秀的模型应当在尽可能识别少数类的同时，保持对多数类的高准确率。为了全面评估模型在这方面的能力，本研究引入了两个关键的模型评估指标：<strong>混淆矩阵（Confusion Matrix）和ROC曲线</strong>。</p><h3 id="3-1混淆矩阵">3.1混淆矩阵</h3><p>混淆矩阵是衡量分类模型性能的基本工具，通过一个简单的表格形式展示模型预测结果与实际标签之间的关系。主对角线上的值表示正确分类的样本数量，非对角线上的值表示错误分类的样本数量。</p><p><strong>绘制混淆矩阵代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, ConfusionMatrixDisplay</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;绘制混淆矩阵...&quot;</span>)</span><br><span class="line">cm = confusion_matrix(selected_test_labels, predicted_test_labels)</span><br><span class="line">ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=unique_labels).plot()</span><br><span class="line">plt.title(<span class="string">&quot;混淆矩阵&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="3-2ROC曲线">3.2ROC曲线</h3><p>ROC曲线（Receiver Operating Characteristic Curve）是评估二分类模型性能的重要工具，通过展示不同阈值下模型的假阳性率（FPR）和真正率（TPR）之间的关系来评估模型性能。</p><p><strong>绘制ROC曲线代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> label_binarize</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;绘制ROC曲线...&quot;</span>)</span><br><span class="line">n_classes = <span class="built_in">len</span>(unique_labels)</span><br><span class="line">y_test = label_binarize(selected_test_labels, classes=unique_labels)</span><br><span class="line">y_score = model.predict_proba(selected_test_images)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个类别的ROC曲线和AUC</span></span><br><span class="line">fpr = <span class="built_in">dict</span>()</span><br><span class="line">tpr = <span class="built_in">dict</span>()</span><br><span class="line">roc_auc = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_classes):</span><br><span class="line">    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])</span><br><span class="line">    roc_auc[i] = auc(fpr[i], tpr[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制所有类别的ROC曲线</span></span><br><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_classes):</span><br><span class="line">    plt.plot(fpr[i], tpr[i], label=<span class="string">f&#x27;Class <span class="subst">&#123;unique_labels[i]&#125;</span> (area = <span class="subst">&#123;roc_auc[i]:<span class="number">.2</span>f&#125;</span>)&#x27;</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], <span class="string">&#x27;k--&#x27;</span>)</span><br><span class="line">plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;False Positive Rate&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Positive Rate&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Receiver Operating Characteristic&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;lower right&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="四、模型训练">四、模型训练</h2><p>本研究中，将28x28像素的图像展开为784维的一维向量，每个像素点的灰度值被视为一个独立的特征。支持向量机（SVM）作为一种监督学习算法，其核心优势在于能够通过核技巧有效地处理高维数据。SVM的性能在很大程度上取决于所选择的核函数及其参数。</p><p>针对不同的核函数，本研究训练了三组SVM模型，以评估它们在图像识别任务中的表现。具体而言，选择了线性核、多项式核和高斯核（径向基函数核）作为研究对象。</p><h3 id="4-1线性核SVM">4.1线性核SVM</h3><p>线性核SVM适用于线性可分的数据集，其核函数为特征向量的点积。在本研究中，使用线性核SVM来评估数据集的线性可分性，并确定其在图像识别任务中的基线性能。</p><p><strong>训练代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsRestClassifier</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练SVM模型...&quot;</span>)</span><br><span class="line">model = OneVsRestClassifier(SVC(kernel=<span class="string">&#x27;linear&#x27;</span>, probability=<span class="literal">True</span>))</span><br><span class="line">model.fit(selected_train_images, selected_train_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试模型...&quot;</span>)</span><br><span class="line">predicted_test_labels = model.predict(selected_test_images)</span><br><span class="line">accuracy = np.mean(predicted_test_labels == selected_test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;测试集准确率: <span class="subst">&#123;accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><ul><li>测试集准确率：0.8830</li><li>模型在识别数字8时表现不佳，而在识别数字1时表现最佳。</li><li>混淆矩阵和ROC曲线如下图所示：</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/6.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/7.png" alt=""></p><h3 id="4-2多项式核SVM">4.2多项式核SVM</h3><p>多项式核SVM能够处理非线性数据，通过将特征空间映射到更高维的空间来实现非线性分类。本研究中，调整多项式核的阶数和系数，以寻找最佳的分类性能。</p><p><strong>训练代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = OneVsRestClassifier(SVC(kernel=<span class="string">&#x27;poly&#x27;</span>, degree=<span class="number">3</span>, coef0=<span class="number">1</span>, probability=<span class="literal">True</span>))</span><br><span class="line">model.fit(selected_train_images, selected_train_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line">predicted_test_labels = model.predict(selected_test_images)</span><br><span class="line">accuracy = np.mean(predicted_test_labels == selected_test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;测试集准确率: <span class="subst">&#123;accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><ul><li>测试集准确率：0.9250</li><li>模型在识别数字1时表现最佳，但在识别数字7和5时效果不佳。</li><li>混淆矩阵和ROC曲线如下图所示：</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/8.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/9.png" alt=""></p><h3 id="4-3高斯核SVM">4.3高斯核SVM</h3><p>高斯核SVM（径向基函数核）是一种处理非线性数据的强大工具。通过调整高斯核的γ（gamma）参数，可以控制决策边界的曲率，从而适应数据的复杂性。</p><p><strong>训练代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = OneVsRestClassifier(SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>, gamma=<span class="number">0.01</span>, probability=<span class="literal">True</span>))</span><br><span class="line">model.fit(selected_train_images, selected_train_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试模型</span></span><br><span class="line">predicted_test_labels = model.predict(selected_test_images)</span><br><span class="line">accuracy = np.mean(predicted_test_labels == selected_test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;测试集准确率: <span class="subst">&#123;accuracy:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><ul><li>测试集准确率：0.9310</li><li>模型在识别数字1时表现最佳，但在识别数字7和5时效果稍差。</li><li>混淆矩阵和ROC曲线如下图所示：</li></ul><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/10.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/svmminist/11.png" alt=""></p><h2 id="五、模型结果与分析">五、模型结果与分析</h2><h3 id="5-1-模型性能总结">5.1 模型性能总结</h3><p>在本次课程设计中，我们针对手写数字识别的实际问题进行了深入研究，并成功实现了模型的预期目标。通过训练不同核函数的SVM模型，我们得到了以下结果：</p><table><thead><tr><th style="text-align:left">核函数类型</th><th style="text-align:left">测试集准确率</th></tr></thead><tbody><tr><td style="text-align:left">线性核</td><td style="text-align:left">0.8830</td></tr><tr><td style="text-align:left">多项式核</td><td style="text-align:left">0.9250</td></tr><tr><td style="text-align:left">高斯核</td><td style="text-align:left">0.9310</td></tr></tbody></table><h3 id="5-2-模型性能分析">5.2 模型性能分析</h3><ol><li><strong>线性核SVM</strong>：<ul><li>适用于线性可分的数据集，但MNIST数据集是非线性可分的，因此线性核的性能较低。</li><li>模型在识别结构简单的数字（如1）时表现较好，但在复杂数字（如8）上表现不佳。</li></ul></li><li><strong>多项式核SVM</strong>：<ul><li>多项式核通过将特征空间映射到更高维，能够处理非线性数据。</li><li>模型在识别数字1时表现最佳，但在区分形状相似的数字（如7和9）时存在局限性。</li></ul></li><li><strong>高斯核SVM</strong>：<ul><li>高斯核通过调整γ参数，能够更好地适应数据的复杂性。</li><li>模型在所有核函数中表现最优，但对某些复杂数字（如7和5）的识别仍存在一定的误差。</li></ul></li></ol><h3 id="5-3-核函数选择与参数优化">5.3 核函数选择与参数优化</h3><ul><li><strong>核函数选择</strong>：核函数的选择对模型性能有显著影响。线性核适用于简单线性问题，多项式核和高斯核则更适合处理非线性数据。高斯核在本实验中表现最优。</li><li><strong>参数优化</strong>：多项式核的阶数（degree）和系数（coef0），以及高斯核的γ参数对模型性能有重要影响。通过调整这些参数，可以进一步优化模型性能。</li></ul><h3 id="5-4-未来研究方向">5.4 未来研究方向</h3><ol><li><strong>深度学习方法</strong>：<ul><li>考虑使用深度学习方法，如卷积神经网络（CNN），进一步提高手写数字识别的性能。</li><li>CNN能够自动提取图像特征，对复杂图像的识别效果更好。</li></ul></li><li><strong>模型可解释性</strong>：<ul><li>探索模型的决策过程，提升模型的可解释性。</li><li>可解释性研究有助于理解模型如何做出预测，从而提高模型的可信度。</li></ul></li><li><strong>实际应用</strong>：<ul><li>将模型应用于实际场景，如邮票手写邮编识别。</li><li>通过数字图像处理技术，将邮票上的数字图像处理为28x28像素大小，输入模型进行识别。</li></ul></li></ol><h2 id="六、结论">六、结论</h2><p>本研究成功实现了手写数字识别的目标，并深入探讨了核函数选择、参数优化对模型性能的影响。实验结果表明，高斯核SVM在MNIST数据集上表现最优，达到了93.10%的测试集准确率。未来的研究将聚焦于深度学习方法的应用和模型可解释性的提升，以进一步推动手写数字识别技术的发展。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;MINIST——SVM&lt;/h1&gt;
&lt;h2 id=&quot;一、-原始数据介绍&quot;&gt;一、 原始数据介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MNIST数据集&lt;/strong&gt;是一个广泛用于机器学习和计算机视觉领域的经典手写数字识别数据集。该数据集由美国国家标准与技术研究所（NIST）发起</summary>
      
    
    
    
    <category term="机器学习" scheme="https://macre.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MINIST" scheme="https://macre.cn/tags/MINIST/"/>
    
    <category term="SVM" scheme="https://macre.cn/tags/SVM/"/>
    
    <category term="支持向量机" scheme="https://macre.cn/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    
    <category term="机器学习" scheme="https://macre.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>英语音频数据分割</title>
    <link href="https://macre.cn/posts/28743b2f.html"/>
    <id>https://macre.cn/posts/28743b2f.html</id>
    <published>2024-02-17T11:22:32.000Z</published>
    <updated>2025-02-20T18:12:00.019Z</updated>
    
    <content type="html"><![CDATA[<h1>起因</h1><p>在支持实验室进行音频数据处理的时候，用剪辑软件太慢了，所以使用python脚本进行处理。</p><p>效果：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/1.png" alt="1709733798286"></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/2.png" alt="1709733244821"></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/3.png" alt="1709733256893"></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/4.png" alt="1709733267079"></p><p>效果可以的。</p><p>过程中使用pickel保存中间数据，chunks500.pickel里保存文件分割后的文件。是一个list[dir{name,faudio}]。可以自己使用pickel打开看看，500的意思是沉默500ms为断句点，创建目的是不用再次分割，分割花时间。即用即调。</p><p>有语音转文本功能，但是效果不是很好，仅作参考！！text.pickel保存语音转文本的内容，是list[dir{name,list[]}],可以用pickel打印看看。</p><h1>1、需要的库支持</h1><p>pydub</p><p>ffmpeg</p><p>tqdm</p><p>pickle</p><p>conda install 或者 pip install 安装。</p><h1>2、文件目录结构</h1><p>一开始：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/5.png" alt="1709732988766"></p><p>展开后：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/PYBU/6.png" alt="1709732943194"></p><p>Mp3:按命名规则保存未裁剪的mp3文件。</p><p>res:需要创建对应的文件夹，名字对应命名格式，里面保存结果。</p><p>main：程序主文件</p><p>chunks500.pickel：保存裁剪后的音频</p><p>text.pickel ：保存语音识别的文本</p><h1>3、完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">from</span> pydub.silence <span class="keyword">import</span> split_on_silence</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Faudio_ls = []</span><br><span class="line">file_faudio = <span class="built_in">open</span>(<span class="string">&quot;./chunks500.pickle&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">wenjian = os.listdir(<span class="string">&quot;./Mp3&quot;</span>)</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tqdm.tqdm(wenjian,desc=<span class="string">&quot;处理的文件中&quot;</span>+<span class="built_in">str</span>(wenjian[j]),unit=<span class="string">&quot;item&quot;</span>,unit_scale=<span class="literal">True</span>,leave=<span class="literal">True</span>,position= <span class="number">0</span>):</span><br><span class="line">    sound = AudioSegment.from_mp3(<span class="string">&quot;./Mp3/&quot;</span> + item)</span><br><span class="line">    loudness = sound.dBFS</span><br><span class="line">    <span class="comment"># 分割</span></span><br><span class="line">    chunks = split_on_silence(</span><br><span class="line">        sound,</span><br><span class="line">        min_silence_len=<span class="number">500</span>, <span class="comment"># 500ms没声音表示就分割</span></span><br><span class="line">        silence_thresh= -<span class="number">50</span>,</span><br><span class="line">        keep_silence= <span class="number">500</span>,</span><br><span class="line">    )</span><br><span class="line">    temp = &#123;<span class="string">&quot;name&quot;</span>:item, <span class="string">&quot;chunks&quot;</span>:chunks&#125;</span><br><span class="line">    Faudio_ls.append(temp)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 分割好了就保存</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> tqdm.tqdm(chunks,position=<span class="number">0</span>,desc=<span class="string">&quot;文件&quot;</span>+<span class="built_in">str</span>(wenjian[j])+<span class="string">&quot;分割好的句子数为：&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(chunks))+<span class="string">&quot;处理中&quot;</span>,unit=<span class="string">&quot;item&quot;</span>,unit_scale=<span class="literal">True</span>):</span><br><span class="line">        chunk.export(<span class="string">&quot;./res/&quot;</span>+<span class="built_in">str</span>(item[<span class="number">0</span>:<span class="number">8</span>])+<span class="string">&quot;/&quot;</span>+<span class="built_in">str</span>(item[<span class="number">0</span>:<span class="number">8</span>])+<span class="string">&quot;-class-&quot;</span>+ <span class="built_in">str</span>(i)+<span class="string">&quot;.wav&quot;</span>, <span class="built_in">format</span>=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    j = j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">pickle.dump(Faudio_ls, file_faudio)</span><br><span class="line">file_faudio.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">英语音频数据分割</summary>
    
    
    
    <category term="深度学习" scheme="https://macre.cn/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://macre.cn/tags/python/"/>
    
    <category term="数据处理" scheme="https://macre.cn/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    <category term="pydub" scheme="https://macre.cn/tags/pydub/"/>
    
  </entry>
  
  <entry>
    <title>DNN深度神经网络的参数、结构对比</title>
    <link href="https://macre.cn/posts/39ee59c3.html"/>
    <id>https://macre.cn/posts/39ee59c3.html</id>
    <published>2024-01-19T23:55:53.000Z</published>
    <updated>2025-02-20T00:50:00.600Z</updated>
    
    <content type="html"><![CDATA[<h1>DNN深度神经网络的参数、结构对比</h1><h2 id="一、参数与结构">一、参数与结构</h2><p><strong>参数与结构</strong>主要是包含：</p><ol><li><p>网络层数</p></li><li><p>不同隐含层个数</p></li><li><p>不同激活函数（隐含层的<strong>Sigmoid()</strong> 函数，<strong>Relu()</strong> 函数。<font color=red>注：输出层是统一的softmax()函数）</font>)</p></li><li><p>不同超参数（包含<strong>随机初始化权重值</strong>，<strong>学习率</strong>，<strong>训练（迭代）次数</strong>）</p></li><li><p>优化方法</p></li></ol><h2 id="二、网络层数">二、网络层数</h2><h3 id="2-1-网络层数：">2.1 网络层数：</h3><p><strong>越来越深</strong>，输入层和输出层神经元个数不变，一个输入层一个输出层。保持学习率，隐含层神经元个数，激活函数、初始化权重值，训练次数不变。</p><table><thead><tr><th>layer</th><th>结果</th></tr></thead><tbody><tr><td>[784, 100, 10]</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/1.png" alt="1704214307620"></td></tr><tr><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/2.png" alt="1704214336664"></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/3.png" alt="1704214392337"></td></tr><tr><td></td><td>泛化能力</td></tr><tr><td>[784, 100, 75, 10]</td><td>收敛过程：<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/4.png" alt="1704213206246"></td></tr><tr><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/5.png" alt="1704212863831"></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/6.png" alt="1704255754628"></td></tr><tr><td></td><td>泛化能力</td></tr><tr><td>[784, 100, 75, 50,10]</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/7.png" alt="1704214802785"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/8.png" alt="1704214784606"></td></tr><tr><td></td><td>泛化能力</td></tr></tbody></table><p>结论：网络越深，收敛的越慢，一定的深度增加测试集合的准确率和验证集的准确率。</p><h3 id="2-2-不同隐含层神经元个数">2.2 不同隐含层神经元个数</h3><p><strong>增加隐含层神经元的个数</strong>，使用四层网络的结构，保持训练次数500，学习率0.01，使用relu激活函数。</p><table><thead><tr><th>layer</th><th>结果</th></tr></thead><tbody><tr><td>[784, 100, 75, 10]</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/4.png" alt="1704213206246"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/9.png" alt="1704213232090"></td></tr><tr><td></td><td>泛化能力</td></tr><tr><td>[784, 200, 150,  10]</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/10.png" alt="1704255662678"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/11.png" alt="1704255685680"></td></tr><tr><td></td><td>泛化能力</td></tr><tr><td>[784, 300,225,10]</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/12.png" alt="1704256528864"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/13.png" alt="1704256521924"></td></tr><tr><td></td><td>泛化能力</td></tr></tbody></table><p>结论：随着隐含层的神经元个数的增加，</p><h3 id="2-3-不同激活函数">2.3 不同激活函数</h3><p><strong>（1）Sigmoid()</strong> 函数：</p><p>函数表达式：$$Sigmoid(x)=\frac{1}{1+e^{-x}}$$</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">Z</span>):</span><br><span class="line">    A = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br></pre></td></tr></table></figure><p>其导函数为：<em><em>f</em>(<em>x</em>)=1+<em>e</em>−<em>x</em>1=*e</em><em>x*+1*e</em><em>x*=1−(*e</em>*x*+1)−1</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    s = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    dZ = dA * s * (<span class="number">1</span>-s)</span><br><span class="line">    <span class="keyword">return</span> dZ</span><br></pre></td></tr></table></figure><p><strong>（2）Relu()</strong> 函数：</p><p>函数表达式：$$f\left( x \right) ,,=,,Max\left( 0,x \right) $$<br>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">Z</span>):</span><br><span class="line">    A = np.maximum(<span class="number">0</span>,Z)</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br></pre></td></tr></table></figure><p>其导函数为：$$<br>f\left( x \right) ’ =,,\begin{cases}<br>0 , x,,=,,0;\<br>1 , x,,\ne ,,0;\<br>\end{cases}<br>$$</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relu_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    dZ = np.array(dA, copy=<span class="literal">True</span>)</span><br><span class="line">    dZ[Z &lt;= <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> dZ</span><br></pre></td></tr></table></figure><p>（3） 两个激活函数的对比</p><p>再相同的网络结构、参数下进行训练：[784, 100, 75, 10]</p><p>结果：</p><table><thead><tr><th></th><th>relu（）</th><th>sigmoid（）</th></tr></thead><tbody><tr><td></td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/14.png" alt="1704256826607"></td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/15.png" alt="1704256866516"></td></tr><tr><td>收敛过程：</td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/4.png" alt="1704213206246"></td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/24.png" alt="1704258199041"></td></tr><tr><td></td><td></td><td></td></tr><tr><td>学习结果与泛化能力：</td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/6.png" alt="1704255754628"></td><td><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/25.png" alt="1704258190910"></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>总结：一开始sigmoid（）函数收敛快，但是到某一点的时候，收敛速度陡然下降，并几乎为一个常数。relu（）函数则从开始到最后都保持一个很好的稳定性。且在MINIST数据集上，sigmod函数效果比relu函数的差。</p><h3 id="2-4-不同超参数">2.4 不同超参数</h3><p><strong>（1）随机初始化权重值</strong> （通过改变<strong>np.random.seed(3)<strong>随机种子值来设置</strong>初始化权重参数</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_W</span>(<span class="params">layers_dims</span>):</span><br><span class="line">    np.random.seed(<span class="number">3</span>)</span><br><span class="line">    parameters = &#123;&#125;</span><br><span class="line">    L = <span class="built_in">len</span>(layers_dims)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">        parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l)] = np.random.randn(layers_dims[l], layers_dims[l - <span class="number">1</span>]) / np.sqrt(layers_dims[l - <span class="number">1</span>])</span><br><span class="line">        parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l)] = np.zeros((layers_dims[l], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><hr><p><strong>（2）学习率</strong></p><p>改变代码中的<strong>learning_rate=0.0075（默认）</strong>，改变学习率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deepnet</span>(<span class="params">X, Y,net_layers,learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,step =<span class="number">1</span>, print_cost=<span class="literal">False</span>, isPlot=<span class="literal">True</span></span>):</span><br><span class="line">    np.random.seed(<span class="number">1</span>) <span class="comment">#设计种子</span></span><br><span class="line">    costs = [] <span class="comment">#用于画图</span></span><br><span class="line">    parameters = init_W(net_layers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_iterations):</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        AL, caches = L_forword(X, parameters)</span><br><span class="line"></span><br><span class="line">        costi = cost(AL, Y) <span class="comment">#这里的Y是标准化的Y</span></span><br><span class="line"></span><br><span class="line">        grads = L_model_backward(AL, Y, caches,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">        parameters = update_parameters(parameters, grads, learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录成本</span></span><br><span class="line">            costs.append(costi)</span><br><span class="line">            <span class="comment"># 是否打印成本值</span></span><br><span class="line">            <span class="keyword">if</span> print_cost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, i, <span class="string">&quot;次迭代，成本值为：&quot;</span>, np.squeeze(costi))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPlot:</span><br><span class="line">        plt.plot(np.squeeze(costs))</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;iterations (per tens)&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;Learning rate =&quot;</span> + <span class="built_in">str</span>(learning_rate))</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># plt.savefig(fnme = &quot;cast&quot;+str(datetime.datetime.now())+&quot;.jig&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>使用网络结构为[784, 50,35,10]，500的迭代次数。</p><table><thead><tr><th>learning_rate</th><th>结果</th></tr></thead><tbody><tr><td>0.01</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/16.png" alt="1704259997141"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/17.png" alt="1704260013837"></td></tr><tr><td></td><td></td></tr><tr><td>0.1</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/18.png" alt="1704260240515"></td></tr><tr><td></td><td>学习结果与泛化能力<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/19.png" alt="1704260257343"></td></tr><tr><td></td><td></td></tr><tr><td>1</td><td>收敛过程<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/20.png" alt="1704260474926"></td></tr><tr><td></td><td>学习结果泛化能力<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/21.png" alt="1704260491851"></td></tr><tr><td></td><td></td></tr></tbody></table><p>总结：学习率选择合适对网络非常重要，过小等于0.01时，收敛慢，过大等于1时导致在最优值左右摆动。</p><p><strong>（3）训练（迭代）次数</strong></p><p>改变代码中的<strong>num_iterations=3000</strong>，改变训练（迭代）次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deepnet</span>(<span class="params">X, Y,net_layers,learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,step =<span class="number">1</span>, print_cost=<span class="literal">False</span>, isPlot=<span class="literal">True</span></span>):</span><br><span class="line">    np.random.seed(<span class="number">1</span>) <span class="comment">#设计种子</span></span><br><span class="line">    costs = [] <span class="comment">#用于画图</span></span><br><span class="line">    parameters = init_W(net_layers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_iterations):</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        AL, caches = L_forword(X, parameters)</span><br><span class="line"></span><br><span class="line">        costi = cost(AL, Y) <span class="comment">#这里的Y是标准化的Y</span></span><br><span class="line"></span><br><span class="line">        grads = L_model_backward(AL, Y, caches,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">        parameters = update_parameters(parameters, grads, learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录成本</span></span><br><span class="line">            costs.append(costi)</span><br><span class="line">            <span class="comment"># 是否打印成本值</span></span><br><span class="line">            <span class="keyword">if</span> print_cost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, i, <span class="string">&quot;次迭代，成本值为：&quot;</span>, np.squeeze(costi))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPlot:</span><br><span class="line">        plt.plot(np.squeeze(costs))</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;iterations (per tens)&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;Learning rate =&quot;</span> + <span class="built_in">str</span>(learning_rate))</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># plt.savefig(fnme = &quot;cast&quot;+str(datetime.datetime.now())+&quot;.jig&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>[784, 50,35,10]</p><table><thead><tr><th>num_iterations</th><th>结果</th></tr></thead><tbody><tr><td>500</td><td>收敛过程 第 490 次迭代，成本值为： 0.21306134142390626<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/18.png" alt="1704260240515"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/19.png" alt="1704260013837"></td></tr><tr><td></td><td>泛化能力</td></tr><tr><td>1000</td><td>收敛过程 第 950 次迭代，成本值为： 0.2089563048185612<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/22.png" alt="1704261316326"></td></tr><tr><td></td><td>学习结果<img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/DNN%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8F%82%E6%95%B0%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94/23.png" alt="1704261278193"></td></tr><tr><td></td><td>泛化能力</td></tr></tbody></table><p>总结：在正常情况下，随着迭代次数的增多，网络效果越好。</p>]]></content>
    
    
    <summary type="html">DNN参数的影响对比</summary>
    
    
    
    <category term="深度学习" scheme="https://macre.cn/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://macre.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MINIST" scheme="https://macre.cn/tags/MINIST/"/>
    
    <category term="python" scheme="https://macre.cn/tags/python/"/>
    
    <category term="参数对比" scheme="https://macre.cn/tags/%E5%8F%82%E6%95%B0%E5%AF%B9%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>最新，anaconda+Pytorch+Pycharm+jypyterlab深度学习环境搭建！</title>
    <link href="https://macre.cn/posts/1f64d3c3.html"/>
    <id>https://macre.cn/posts/1f64d3c3.html</id>
    <published>2024-01-10T23:12:02.000Z</published>
    <updated>2025-02-20T00:27:58.968Z</updated>
    
    <content type="html"><![CDATA[<p>​</p><p>一定要看的前言：</p><p>授人以鱼，不如授人以渔。技术飞速发展，许多教程都会过时，我们个人博客记录只是一时，我们不能看2018年的文章来安装2024年版本的东西，会很不一样。所以我们一切要去看官方维护的文档，官方文档会及时更新，学会看这个文档对每个IT人都有好处！</p><h2 id="一、anaconda下载安装">一、anaconda下载安装</h2><p>第一找到anaconda里面有我们需要的所有！有官网写的文档和教学，都是权威的指导！</p><p><a href="https://www.anaconda.com/download">Free Download | Anaconda</a> 官网上下载安装包！</p><p><a href="https://docs.anaconda.com/free/anaconda/install/windows/">在 Windows 上安装 — Anaconda 文档</a> 官网的anaconda安装教程！</p><h2 id="二、安装CUDA用GPU版本">二、安装CUDA用GPU版本</h2><p>如果你想用GPU而不是cpu，那就得安装CUDA。</p><p><a href="https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html">适用于 Microsoft Windows 的 CUDA 安装指南 (nvidia.com)</a> 这是官方文档！</p><p>作为一个合格的IT人，查看官方文档是非常重要的，里面什么都写了！</p><h2 id="三、安装pytorch">三、安装pytorch</h2><p>本次环境使用anaconda的jupyter lab+pycharm。使用anaconda建立一个专门的pytorch环境，有利于我们学习和实验，整个环境就不像anaconda自带的base那么臃肿。</p><p>（1）conda 创建一一个环境</p><p>打开anaconda prompt</p><p><img src="https://api.smain.cn/pics/pic_670c0b1e.png" alt="pic_670c0b1e.png"></p><p>在base环境下输入，下列命令创建一个pytorch的环境。</p><p>conda create -n pytorch</p><p><img src="https://api.smain.cn/pics/pic_abbe21b3.png" alt="pic_abbe21b3.png"></p><p><img src="https://api.smain.cn/pics/pic_87e47f05.png" alt="pic_87e47f05.png"></p><p>输入y就行。</p><p>pytorch要到国外去下载，会出现一些问题，使用换源就可以解决。</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a> 还是官方文档！写得很好恒具体了。</p><p>我的是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-<span class="number">64</span>/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><p>换完源后，去pytorch官方：</p><p><a href="#%E4%B8%89%E3%80%81%E5%AE%89%E8%A3%85pytorch">PyTorch</a>，选择对应的版本，只要保证你的cuda版本是大于pytorch的cuda版本就行。</p><p><a href="https://pytorch.org/get-started/previous-versions/">Previous PyTorch Versions | PyTorch</a> 这是先前的版本。<img src="https://api.smain.cn/pics/pic_5d6c5be2.png" alt="pic_5d6c5be2.png"></p><p>复制命令，回到命令窗口，激活pytorch环境，并在该环境下执行本命令。</p><p><img src="https://api.smain.cn/pics/pic_fb23aab3.png" alt="pic_fb23aab3.png"></p><p><img src="https://api.smain.cn/pics/pic_81a80b10.png" alt="pic_81a80b10.png"></p><p>出现 unsuccessful也不要怕，等一会就好。</p><p><img src="https://api.smain.cn/pics/pic_bb23e54b.png" alt="pic_bb23e54b.png"></p><p>等一会就找到了，之后输入y，就行。</p><h2 id="四、-用ipykernel为虚拟环境创建内核kernel">四、 用ipykernel为虚拟环境创建内核kernel</h2><p>ipykernel官方简介：<a href="https://pypi.org/project/ipykernel/">ipykernel · PyPI</a></p><p>简而言之，内核可以方便我们在base环境里启动jupyter lab后，可以使用其他环境来运行我们的笔记。</p><p><img src="https://api.smain.cn/pics/pic_1ef1e9c8.png" alt="pic_1ef1e9c8.png">使用deactivate回到base，确保base里有ipykernel，使用conda install ipykernel <img src="https://api.smain.cn/pics/pic_b3910895.png" alt="pic_b3910895.png"></p><p>用base为pytorch安装ipykernrl。（用base在env里安装一个ipykernel ）</p><p>conda install -n <env-name> ipykernel <img src="https://api.smain.cn/pics/pic_ed0f51ec.png" alt="pic_ed0f51ec.png"></p><p>进入到pytorch环境里配置kernel。</p><p>python -m ipykernel install --user --name <env-name> --display-name “display name” <img src="https://api.smain.cn/pics/pic_3010c129.png" alt="pic_3010c129.png"></p><p>到此内核配置完毕。</p><h2 id="五、jupyter-lab配置">五、jupyter lab配置</h2><p>官方：<a href="https://jupyter.org/">Project Jupyter | Home</a></p><p>可以去看看官方文档，我们唯一要改变的是其root目录到我们想要作为更目录的地方。如果不变，他默认在c盘，你后期添加数据会很占c盘空间。</p><p><img src="https://api.smain.cn/pics/pic_b2be5c35.png" alt="pic_b2be5c35.png"></p><p>拿到配置文件位置。</p><p><img src="https://api.smain.cn/pics/pic_dc7066f7.png" alt="pic_dc7066f7.png"></p><p>按<code>Ctrl + F</code>查找<code>c.ServerApp.root_dir</code>，修改为自己需要的目录。注意带双引号哦。</p><p><img src="https://api.smain.cn/pics/pic_385c2c3f.png" alt="pic_385c2c3f.png"></p><p>使用命令打开jupyter lab</p><p><img src="https://api.smain.cn/pics/pic_60283722.png" alt="pic_60283722.png"></p><p>这是我创建的学习环境，可以在pytorch里学习pytorch。<a href="https://pytorch.org/tutorials/">Welcome to PyTorch Tutorials — PyTorch Tutorials 2.2.0+cu121 documentation</a><img src="https://api.smain.cn/pics/pic_07ea1438.png" alt="pic_07ea1438.png"></p><p>类似的还可以创建opencv，tensorflow的学习环境。<img src="https://api.smain.cn/pics/pic_9f2a3695.png" alt="pic_9f2a3695.png"></p><h2 id="六、anaconda和pycharm结合">六、anaconda和pycharm结合</h2><p>anaconda和pycharm结合，可以使包管理更加有效，开发效率更高。</p><p>你想使用pycharm来开发一个pytorch项目。此时只用新建一个文件夹：</p><p><img src="https://api.smain.cn/pics/pic_a898c17e.png" alt="pic_a898c17e.png"></p><p>拖住此文件夹到pycharm图标上。<img src="https://api.smain.cn/pics/pic_2cb97f91.png" alt="pic_2cb97f91.png">，得到下面：</p><p><img src="https://api.smain.cn/pics/pic_61e0eaaf.png" alt="pic_61e0eaaf.png"></p><p>测试一下torch</p><p><img src="https://api.smain.cn/pics/pic_44771c94.png" alt="pic_44771c94.png">找不到。</p><p>在file里的settings找到project：test里的python interpreter：</p><p>点击小齿轮，点击add</p><p><img src="https://api.smain.cn/pics/pic_ed8514d0.png" alt="pic_ed8514d0.png"></p><p><img src="https://api.smain.cn/pics/pic_c6e81085.png" alt="pic_c6e81085.png"></p><p>点击三点，选择anaconda安装目录下envs里的python解释器。</p><p><img src="https://api.smain.cn/pics/pic_b63d7c2b.png" alt="pic_b63d7c2b.png"></p><p>添加完后点击apply，然后点击ok。</p><p><img src="https://api.smain.cn/pics/pic_f7c2a0b7.png" alt="pic_f7c2a0b7.png"></p><p>最后torch被引入了！<img src="https://api.smain.cn/pics/pic_7a99dcdd.png" alt="pic_7a99dcdd.png"></p><p>最后整个环境就搭建完成了！</p>]]></content>
    
    
    <summary type="html">jupyterlab深度学习环境搭建</summary>
    
    
    
    <category term="深度学习" scheme="https://macre.cn/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://macre.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="人工智能" scheme="https://macre.cn/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="anaconda" scheme="https://macre.cn/tags/anaconda/"/>
    
    <category term="pytorch" scheme="https://macre.cn/tags/pytorch/"/>
    
    <category term="jupyterlab" scheme="https://macre.cn/tags/jupyterlab/"/>
    
  </entry>
  
  <entry>
    <title>Python ：MNIST手写数据集识别 + 手写板程序</title>
    <link href="https://macre.cn/posts/a8ef5b13.html"/>
    <id>https://macre.cn/posts/a8ef5b13.html</id>
    <published>2023-11-19T23:50:07.000Z</published>
    <updated>2025-02-20T00:27:32.665Z</updated>
    
    <content type="html"><![CDATA[<p>可以帮写大报告和课程设计！联系方式qq2099890266</p><p>所有的工程文件百度云连接，包含模型！</p><p>链接：<a href="https://pan.baidu.com/s/1RlS0aVPOFwmNBPBHmcF0SQ">https://pan.baidu.com/s/1RlS0aVPOFwmNBPBHmcF0SQ</a><br>提取码：MATR<br>–来自百度网盘超级会员V3的分享</p><p>注意：人工智能预测的闪退问题是在main文件同目录下没有image_rgzn的文件夹，添加就好。</p><h2 id="一、背景与总概">一、背景与总概</h2><p>利用Python语言编写和调试一个识别手写数字图像的三层深度前馈网络，包括数据预处理，网络模型构建，模型参数初始化和正向推理，反向梯度下降参数寻优，最后模型预测的功能。目的是学会基本的深度网络模型建立、训练和推理过程，理解深度网络的实现原理。</p><p>通过自己学习人工智能之后，发现了三个的重要经验和总结，第一个是你对你研究事物本质的理解；第二个是，将你研究事物进行数据化，找到一个合理的数据表示以及数据的结构；第三个是，寻找与这个数据表示的形式和结构合适的“模型”（即模型算法等）。依据上面数据到模型的这个思路，对下文进行一个描写</p><p>首先，介绍一下MNIST手写数据集，这就是我们研究的事物了。该数据集包含60,000个用于训练的示例和10,000个用于测试的示例。数据集包含了0-9共10类手写数字图片,每张图片都做了尺寸归一化，都是28x28大小的灰度图。</p><p>训练集图像：train-images-idx3-ubyte.gz（9.9MB，包含60000个样本）<br>训练集标签：train-labels-idx1-ubyte.gz（29KB，包含60000个标签）<br>测试集图像：t10k-images-idx3-ubyte.gz（1.6MB，包含10000个样本）<br>测试集标签：t10k-labels-idx1-ubyte.gz（5KB，包含10000个标签）</p><p>下图展示一些具体例子：</p><p><img src="https://api.smain.cn/pics/pic_73889f7b.png" alt="pic_73889f7b.png"></p><p>其次是手写板程序，在<a href="https://blog.csdn.net/CreatorGG/article/details/81542837">PyQt5实例 画板小程序_pyqt5画图板_CreatorGG的博客-CSDN博客</a>的程序基础之上添加了，1人工智能预测，2预测结果展示的文本框。</p><p><img src="https://api.smain.cn/pics/pic_37474b03.png" alt="pic_37474b03.png"></p><p>传统机器学习的问题与缺陷随着深度学习的发展被得到解决，深度学习也可以说是神经网络的重命名，他是建立在多层非线性的神经网络结构之上，对数据表示进行抽象的一系列机器学习。深度学习的出现使得图像，语言得到突破性的发展。本此处理的数据为图像，所以最后我本次选用的模型是人工智能深度神经网络（一般的神经网络）。你也可以使用卷积神经网络模型，卷积神经网络是对将局部的特征十分的敏感，正确率会更高。</p><h2 id="二、研究对象">二、研究对象</h2><p>在你的PycharmIDE里创建一个function.py的文件，在里面定义如下函数：</p><p>1：jiexi_image（path），此函数需要一个字符串对象的输入，是两个训练集和测试集的图像文件地址，返回的对象是一个numpy.array的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_image</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 用二进制读取</span></span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;iiii&#x27;</span></span><br><span class="line">    magic_number, num_images, num_rows, num_cols = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;魔数:%d, 图片数量: %d张, 图片大小: %d*%d&#x27;</span> % (magic_number, num_images, num_rows, num_cols))</span><br><span class="line">    image_size = num_rows * num_cols</span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;&#x27;</span> + <span class="built_in">str</span>(image_size) + <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    images = np.empty((num_images, num_rows, num_cols))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已解析 %d&#x27;</span> % (i + <span class="number">1</span>) + <span class="string">&#x27;张&#x27;</span>)</span><br><span class="line">        images[i] = np.array(struct.unpack_from(fmt_image, data, offset)).reshape((num_rows, num_cols))</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> images</span><br></pre></td></tr></table></figure><p>2： jiexi_label(path) ，传入参数是训练集和测试集的两个label标签文件地址，是一个字符串对象，返回的也是一个numpy.array的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_label</span>(<span class="params">path</span>):</span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;ii&#x27;</span></span><br><span class="line">    magic_number, num_images = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;魔数:%d, 图片数量: %d张&#x27;</span> % (magic_number, num_images))</span><br><span class="line">    <span class="comment"># 解析数据集</span></span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;B&#x27;</span></span><br><span class="line">    labels = np.empty(num_images)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已解析 %d&#x27;</span> % (i + <span class="number">1</span>) + <span class="string">&#x27;张&#x27;</span>)</span><br><span class="line">        labels[i] = struct.unpack_from(fmt_image, data, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br></pre></td></tr></table></figure><p>3：plot_data(images,labels,n,issave = False)，传入图像，image是一个numpy.array对象；传入的标签，labels是一个numpy.array对象；传入的issave是一个判断逻辑值，如果是真就保存图片，但是一般是不保存的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_data</span>(<span class="params">images,labels,n,issave = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(labels[i])</span><br><span class="line">        plt.imshow(images[i], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># if(issave == True):</span></span><br><span class="line">            <span class="comment"># plt.savefig(fname = &quot;save&quot;+str(datetime.datetime.now())+&quot;.jpg&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a href="http://xn--train-fg1hqca4zv6ek7a773dtegmks2zdcsyirhz3iqw1fb0omwd.py">接下来在你的工程文件夹下建立一个train.py</a> 文件，在里面利用function.py里你设定的函数来解析训练集图像和测试集图像，训练集标签和测试集标签，然后利用plot_data函数打印数据，查看是否对应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> function</span><br><span class="line"><span class="comment">#start1 = time.time()</span></span><br><span class="line">train_image_path = <span class="string">&#x27;./MNIST/train-images-idx3-ubyte/train-images.idx3-ubyte&#x27;</span></span><br><span class="line">train_lable_path = <span class="string">&#x27;./MNIST/train-labels-idx1-ubyte/train-labels.idx1-ubyte&#x27;</span></span><br><span class="line">teat_image_path = <span class="string">&#x27;./MNIST/t10k-images-idx3-ubyte/t10k-images.idx3-ubyte&#x27;</span></span><br><span class="line">teat_lable_path = <span class="string">&#x27;./MNIST/t10k-labels-idx1-ubyte/t10k-labels.idx1-ubyte&#x27;</span></span><br><span class="line"><span class="comment"># #加载数据</span></span><br><span class="line">train_image = function.jiexi_image(train_image_path)</span><br><span class="line">train_lable = function.jiexi_label(train_lable_path)</span><br><span class="line">teat_image = function.jiexi_image(teat_image_path)</span><br><span class="line">test_lable = function.jiexi_label(teat_lable_path)</span><br><span class="line"><span class="comment"># print(train_image.shape)</span></span><br><span class="line"></span><br><span class="line">function.plot_data(train_image, train_lable, <span class="number">10</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img src="https://api.smain.cn/pics/pic_1a7dd738.png" alt="pic_1a7dd738.png"> <img src="https://api.smain.cn/pics/pic_f59b3504.png" alt="pic_f59b3504.png"></p><p>可以看出是正确的。</p><h2 id="三、数据表示与结构">三、数据表示与结构</h2><p>既然train_image， train_lable， teat_image ， test_lable 是numpy.array对象，那么我们就可以对他进行操作，对他进行打印输出，print（train_image）：</p><p><img src="https://api.smain.cn/pics/pic_8f87bf0c.png" alt="pic_8f87bf0c.png"></p><p>什么也看不出来，那我们打印一下他的维度来看看， <img src="https://api.smain.cn/pics/pic_a909807f.png" alt="pic_a909807f.png">，是一个三维数组。</p><p>打印train_image[0]来看：</p><p><img src="https://api.smain.cn/pics/pic_3373a418.png" alt="pic_3373a418.png"></p><p>然后可以推知，我们要处理的对象结构是如下图所示。<img src="https://api.smain.cn/pics/pic_7af42315.png" alt="pic_7af42315.png"></p><h2 id="四、选择的模型">四、选择的模型</h2><p>传统机器学习的问题与缺陷随着深度学习的发展被得到解决，深度学习也可以说是神经网络的重命名，他是建立在多层非线性的神经网络结构之上，对数据表示进行抽象的一系列机器学习。深度学习的出现使得图像，语言得到突破性的发展。本此处理的数据为图像，所以最后我本次选用的模型是人工智能深度神经网络（一般的神经网络）。你也可以使用卷积神经网络模型，卷积神经网络是对将局部的特征十分的敏感，正确率会更高。</p><p>在你的工程文件下创建一个DeepNET.py的文件，里面是深度神经网络所需要的各种函数。从零开始，从理论到代码实现无论是在研究和学习都是十分有帮助的，希望我和各位读者都保持住这个习惯。</p><p>本次，假设你已经有一定的知识储备了，如梯度下降法的本质，神经网络结构基本清楚，如果不清楚就十分推荐，deeplearning的吴大师的视频教程 <a href="https://www.bilibili.com/video/BV1FT4y1E74V/?spm_id_from=333.337.search-card.all.click&amp;vd_source=5dd72f55ad4b8646829d46480d68f38e">[双语字幕]吴恩达深度学习deeplearning.ai_哔哩哔哩_bilibili</a> 教的非常细致。</p><p>第一步，导入库，在DeepNET.py的文件里完善搭建深度神经网络所需要的函数。</p><p>深度神经网络概述，Deep Neural Networks， 深度神经网络，以下简称DNN。DNN里最基本的单元是神经元模型。每个神经元与其他神经元相连，当他“兴奋”时，就会向相连的神经元发送物质，改变神经元的电位。如果某个神经元的电位超过了一个阀值，那么它就会被激活。结果抽象可以得到沿用至今的M_P神经元模型。</p><p><img src="https://api.smain.cn/pics/pic_36d936c8.png" alt="pic_36d936c8.png"></p><p>线性部分，是简单的相乘相加，激活部分是利用激活函数处理得到输出。常见的激活函数有sigmoid，relu等，本次采用的激活函数是relu函数。</p><p><img src="https://api.smain.cn/pics/pic_a054b9d0.png" alt="pic_a054b9d0.png"></p><p>由神经元组成的多层神经网络，如图所示。有输入层，输出层以及中间隐含层。每一个输入线性求合，通过激活函数，传到下一个神经元，我们大可不必一个个的去算，我们可以使用向量化来使得我们的程序更加简洁。</p><p><img src="https://api.smain.cn/pics/pic_03989bf8.png" alt="pic_03989bf8.png"></p><p>梯度下降法：</p><p><img src="https://api.smain.cn/pics/pic_e11b4729.png" alt="pic_e11b4729.png"> <img src="https://api.smain.cn/pics/pic_03e7a9bc.png" alt="pic_03e7a9bc.png"></p><p><img src="https://api.smain.cn/pics/pic_c778fdb0.png" alt="pic_c778fdb0.png"> <img src="https://api.smain.cn/pics/pic_387d5800.png" alt="pic_387d5800.png"></p><p>（下面为了简单我以输入的对象是28*28规格图片，第一层隐含单元有200个，第二层隐含单元是100个，输出层为10个的网络结构阐述。）</p><p>一般的构造网络的流程：</p><p>初始化超参数（包括启动深度神经网络的权值w，偏执b）–》向前传播（线性部分+激活函数）–》 计算代价 --》 反向传播 （激活函数反向，线性部分反向）–》更新超参数.</p><p>基础部分和总概 网络结构为 [28*28 200 100 10]</p><p>学习人工智能，应该理论应用于实践，应该多动手进行数学演算，将演算用代码实现，最后进行总结于改进。</p><p>（1）对这个网络的结构要有一个清楚的认识</p><p><img src="https://api.smain.cn/pics/pic_477caa04.png" alt="pic_477caa04.png"></p><p>在草稿本上进行矩阵维数的测试</p><p><img src="https://api.smain.cn/pics/pic_4730d17d.png" alt="pic_4730d17d.png"></p><p>下面是对于想要了解代码一个个看清楚流程的去看，如果想直接跑通，代码在最后！</p><p>1、导入库，是导入一些必要的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> h5py</span><br></pre></td></tr></table></figure><p>2、定义所需要的softmax函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">Z</span>):</span><br><span class="line">    A = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    s = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    dZ = dA * s * (<span class="number">1</span>-s)</span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># relu函数 和反向求导</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">Z</span>):</span><br><span class="line">    A = np.maximum(<span class="number">0</span>,Z)</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    dZ = np.array(dA, copy=<span class="literal">True</span>)</span><br><span class="line">    dZ[Z &lt;= <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Softmax</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">Z</span>):</span><br><span class="line">    A = np.exp(Z)/np.<span class="built_in">sum</span>(np.exp(Z),axis=<span class="number">0</span>)</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br></pre></td></tr></table></figure><p>在此我把relu和sigmoid函数也给出，方便读者后续的使用，可以利用这个去做逻辑回归啊什么什么的，增加泛用性。</p><p>3、初始化参数</p><p>使用梯度下降法的首要步骤就是初始化参数，这个点是随机的。</p><p>输入的是 layers_dims是一个向量，是你的网络结构。返回的是一个字典对象parameters，里面有超参数w和b。、</p><p>恭喜你，走出了第一步，完成了初始化参数的步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_W</span>(<span class="params">layers_dims</span>):</span><br><span class="line">    np.random.seed(<span class="number">3</span>)</span><br><span class="line">    parameters = &#123;&#125;</span><br><span class="line">    L = <span class="built_in">len</span>(layers_dims)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">        parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l)] = np.random.randn(layers_dims[l], layers_dims[l - <span class="number">1</span>]) / np.sqrt(layers_dims[l - <span class="number">1</span>])</span><br><span class="line">        parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l)] = np.zeros((layers_dims[l], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>4.1、向前传播之线性部分</p><p><img src="https://api.smain.cn/pics/pic_dbea80af.png" alt="pic_dbea80af.png">，也就是输入x与权值相乘与偏执相加。是一层的线性部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">L_forword_sum</span>(<span class="params">W,A,b</span>):</span><br><span class="line">    Z = np.dot(W,A)+b</span><br><span class="line">    cache = (A,W,b)</span><br><span class="line">    <span class="keyword">return</span> Z,cache</span><br></pre></td></tr></table></figure><p>4.2、向前传播之激活函数向前</p><p>隐含层使用的是relu函数，输出层使用的是softmax函数，参考<a href="https://blog.csdn.net/bitcarmanlee/article/details/82320853?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167784240416800188575159%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167784240416800188575159&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82320853-null-null.142%5Ev73%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&amp;utm_term=softmax%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187">(311条消息) 入门级都能看懂的softmax详解_bitcarmanlee的博客-CSDN博客</a>。</p><p><a href="https://blog.csdn.net/u012905422/article/details/52601022?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167784920616782427455502%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167784920616782427455502&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-52601022-null-null.142%5Ev73%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&amp;utm_term=relu%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187">(311条消息) ReLU函数简介_潇湘_AQ的博客-CSDN博客</a></p><p>本函数是基于线性部分建立的一个输入是A_prev是上一层的输出，W，b是本层的网络参数，activation是激活函数的名字，用于选择用哪一个函数。返回值是一个元组，包含A隐含层输出的激活值，和用于反向传播时的重要数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">L_activate_forworld</span>(<span class="params">A_prev,W,b,activation</span>):</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        Z ,linear_cache =  L_forword_sum(W,A_prev,b)</span><br><span class="line">        A, activation_cache = relu(Z)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        Z, linear_cache = L_forword_sum(W, A_prev, b)</span><br><span class="line">        A, activation_cache = sigmoid(Z)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        Z, linear_cache = L_forword_sum(W, A_prev, b)</span><br><span class="line">        A, activation_cache = softmax(Z)</span><br><span class="line">    cache = (linear_cache, activation_cache)</span><br><span class="line">    <span class="keyword">return</span> A,cache</span><br></pre></td></tr></table></figure><p>4.3、向前传播函数接口</p><p>线性部分+激活函数组成一次向前传播，线性部分的输出输入到激活函数最后得到的最终值。</p><p>函数输入x是初始的输入值即图片的大小，parameters是超参数字典。经过一个for循环可以完成整个向前传播。</p><p>恭喜你，你的网络利用这个函数就可以进行向前传播了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">L_forword</span>(<span class="params">X, parameters</span>):</span><br><span class="line">    caches = []</span><br><span class="line">    A = X</span><br><span class="line">    L = <span class="built_in">len</span>(parameters) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">        A_prev = A</span><br><span class="line">        A, cache = L_activate_forworld(A_prev, parameters[<span class="string">&#x27;W&#x27;</span> + <span class="built_in">str</span>(l)], parameters[<span class="string">&#x27;b&#x27;</span> + <span class="built_in">str</span>(l)], <span class="string">&quot;relu&quot;</span>)</span><br><span class="line">        caches.append(cache)</span><br><span class="line">    <span class="comment"># 最后一层使用softmax</span></span><br><span class="line">    AL, cache  = L_activate_forworld(A, parameters[<span class="string">&#x27;W&#x27;</span> + <span class="built_in">str</span>(L)], parameters[<span class="string">&#x27;b&#x27;</span> + <span class="built_in">str</span>(L)], <span class="string">&quot;softmax&quot;</span>)</span><br><span class="line">    caches.append(cache)</span><br><span class="line">    <span class="keyword">return</span> AL, caches</span><br></pre></td></tr></table></figure><p>5、计算代价之交叉熵代价函数</p><p><a href="https://blog.csdn.net/SongGu1996/article/details/99056721?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167784992416800182144467%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167784992416800182144467&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-99056721-null-null.142%5Ev73%5Econtrol_1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&amp;utm_term=%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&amp;spm=1018.2226.3001.4187">(311条消息) 交叉熵损失函数（Cross Entropy Loss）_SongGu1996的博客-CSDN博客</a></p><p>你可以计算你的网络的代价了，每个网络都希望做到收敛快，代价小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">Y_out,Y</span>):</span><br><span class="line">    cost = -np.<span class="built_in">sum</span>(np.multiply(np.log(Y_out), Y)) / Y_out.shape[<span class="number">1</span>]</span><br><span class="line">    cost = np.squeeze(cost)</span><br><span class="line">    <span class="keyword">return</span> cost</span><br></pre></td></tr></table></figure><p>5.1、反向传播之线性部分的反向</p><p>感兴趣的可以到我的草稿上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_backward</span>(<span class="params">dZ, cache</span>):</span><br><span class="line">    A_prev, W, b = cache</span><br><span class="line">    m = A_prev.shape[<span class="number">1</span>]</span><br><span class="line">    dW = np.dot(dZ, A_prev.T) / m</span><br><span class="line">    db = np.<span class="built_in">sum</span>(dZ, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>) / m</span><br><span class="line">    dA_prev = np.dot(W.T, dZ)</span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br></pre></td></tr></table></figure><p>5.2、反向传播之激活函数的反向</p><p>感兴趣的可以到我的草稿上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_activation_backward</span>(<span class="params">dA, cache, Y,activation=<span class="string">&quot;relu&quot;</span></span>):</span><br><span class="line">    linear_cache, activation_cache = cache</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        dZ = relu_backward(dA, activation_cache)</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        dZ = sigmoid_backward(dA, activation_cache)</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        dZ = dA - Y</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br></pre></td></tr></table></figure><p>5.3、 反向传播函数接口</p><p>将激活函数的反向和线性部分的反向组织好后，封装为一个反向函数接口。</p><p>恭喜你，你已经做好了反向传播了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">L_model_backward</span>(<span class="params">AL, Y, caches,<span class="keyword">case</span></span>):</span><br><span class="line">    grads = &#123;&#125;</span><br><span class="line">    L = <span class="built_in">len</span>(caches)</span><br><span class="line">    m = AL.shape[<span class="number">1</span>]</span><br><span class="line">    Y = Y.reshape(AL.shape)</span><br><span class="line">    dAL = - (np.divide(Y, AL) - np.divide(<span class="number">1</span> - Y, <span class="number">1</span> - AL))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        current_cache = caches[L - <span class="number">1</span>]</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(L)] = linear_activation_backward(AL, current_cache,Y,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">case</span>  == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        current_cache = caches[L - <span class="number">1</span>]</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(L)] = linear_activation_backward(AL, current_cache,Y, <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(L - <span class="number">1</span>)):</span><br><span class="line">        current_cache = caches[l]</span><br><span class="line">        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(l + <span class="number">2</span>)], current_cache, Y ,<span class="string">&quot;relu&quot;</span>)</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = dA_prev_temp</span><br><span class="line">        grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = dW_temp</span><br><span class="line">        grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = db_temp</span><br><span class="line">    <span class="keyword">return</span> grads</span><br></pre></td></tr></table></figure><p>6、利用梯度下降法 更新参数</p><p>梯度下降法是一个十分好的优化算法，他的目的更改参数使代价优化到最小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_parameters</span>(<span class="params">parameters, grads, learning_rate</span>):</span><br><span class="line">    L = <span class="built_in">len</span>(parameters) // <span class="number">2</span>  <span class="comment"># 整除</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">        parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] - learning_rate * grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)]</span><br><span class="line">        parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] - learning_rate * grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>7、神经网络搭建</p><p>依据下面的过程，将你的函数，像拼拼图一样做出来。</p><p>初始化超参数（包括启动深度神经网络的权值w，偏执b）–》向前传播（线性部分+激活函数）–》 计算代价 --》 反向传播 （激活函数反向，线性部分反向）–》更新超参数</p><p>for循环是来进行重复训练的。.</p><p>X, 输入的样本集；Y，label集；</p><p>net_layers,网络结构；learning_rate=0.0075, 学习率；num_iterations=3000,迭代次数；step =1, 步长；print_cost=False, 是否打印代价；isPlot=True，是否绘制代价—迭代次数图；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deepnet</span>(<span class="params">X, Y,net_layers,learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,step =<span class="number">1</span>, print_cost=<span class="literal">False</span>, isPlot=<span class="literal">True</span></span>):</span><br><span class="line">    np.random.seed(<span class="number">1</span>) <span class="comment">#设计种子</span></span><br><span class="line">    costs = [] <span class="comment">#用于画图</span></span><br><span class="line">    parameters = init_W(net_layers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_iterations):</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        AL, caches = L_forword(X, parameters)</span><br><span class="line"></span><br><span class="line">        costi = cost(AL, Y) <span class="comment">#这里的Y是标准化的Y</span></span><br><span class="line"></span><br><span class="line">        grads = L_model_backward(AL, Y, caches,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">        parameters = update_parameters(parameters, grads, learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录成本</span></span><br><span class="line">            costs.append(costi)</span><br><span class="line">            <span class="comment"># 是否打印成本值</span></span><br><span class="line">            <span class="keyword">if</span> print_cost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, i, <span class="string">&quot;次迭代，成本值为：&quot;</span>, np.squeeze(costi))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPlot:</span><br><span class="line">        plt.plot(np.squeeze(costs))</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;iterations (per tens)&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;Learning rate =&quot;</span> + <span class="built_in">str</span>(learning_rate))</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># plt.savefig(fnme = &quot;cast&quot;+str(datetime.datetime.now())+&quot;.jig&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> parameters</span><br></pre></td></tr></table></figure><p>8、测试集合测试</p><p>将得到的模型，用于测试集看准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">X, y, parameters,Y_org</span>):</span><br><span class="line"></span><br><span class="line">    m = X.shape[<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(parameters) // <span class="number">2</span>  <span class="comment"># 神经网络的层数</span></span><br><span class="line">    p = np.zeros((<span class="number">1</span>, m))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据参数前向传播</span></span><br><span class="line">    probas, caches = L_forword(X, parameters)</span><br><span class="line">    p = np.argmax(probas,axis=<span class="number">0</span>)</span><br><span class="line">    zql = <span class="built_in">float</span>(np.<span class="built_in">sum</span>((p == Y_org)) / m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确度为: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(np.<span class="built_in">sum</span>((p == Y_org)) / m)))</span><br><span class="line"></span><br><span class="line">    error_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> p[i] != Y_org[i]:</span><br><span class="line">            error_list.append(i)</span><br><span class="line">    <span class="keyword">return</span> p,error_list,zql</span><br></pre></td></tr></table></figure><p>9、保存模型</p><p>你所训练好的网络不仅仅只是训练好就完了，你要应用它，就得保存下来，我这里有两个保存函数，一个是保存为txt文本，一个是保存为h5文件，建议使用h5文件，也可以像vvg19那样使用.mat文件数据，只要是数据，你就可以打开，打开的接口可以自己写，如果自己写的话一般是学习其结构，转化为二进制在转化为你想要的数据，不过，基本有大佬写出来了，不要闭门造车。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">parameters</span>):</span><br><span class="line">    np.set_printoptions(threshold=sys.maxsize)</span><br><span class="line"></span><br><span class="line">    model_number = <span class="number">0</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;model/model&quot;</span> + <span class="built_in">str</span>(model_number) + <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(datetime.datetime.now()) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;model_number &quot;</span> + <span class="built_in">str</span>(model_number) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> parameters.items():</span><br><span class="line">        f.write(<span class="built_in">str</span>(i) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(j) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存为h5数据格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_h5</span>(<span class="params">data,layers,zql</span>):</span><br><span class="line">    str1 = <span class="string">&quot;./model/model&quot;</span>+<span class="built_in">str</span>(datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>))+<span class="string">&quot;.h5&quot;</span></span><br><span class="line">    f = h5py.File(str1, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    ID = [<span class="string">&quot;model layer &quot;</span>]</span><br><span class="line">    f.create_dataset(<span class="string">&quot;layers&quot;</span>,data = layers)</span><br><span class="line">    i = <span class="built_in">len</span>(data) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        f.create_dataset(<span class="string">&quot;W&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>),data = data[<span class="string">&quot;W&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)])</span><br><span class="line">        f.create_dataset(<span class="string">&quot;b&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>),data = data[<span class="string">&quot;b&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)])</span><br><span class="line">    f.create_dataset(<span class="string">&quot;accuracy&quot;</span>,data = zql)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>10、利用模型预测和读取h5数据格式的模型</p><p>保存好了数据，就是如何读取我们的网络参数，进行运用人工智能深度神经网络。利用这两个函数就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict1</span>(<span class="params">X, parameters</span>):</span><br><span class="line">    <span class="comment"># 根据参数前向传播</span></span><br><span class="line">    probas, caches = L_forword(X, parameters)</span><br><span class="line">    p = np.argmax(probas,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_ccs</span>(<span class="params">path</span>):</span><br><span class="line">    w = h5py.File(path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    layers = w[<span class="string">&quot;layers&quot;</span>][:]</span><br><span class="line">    l = <span class="built_in">len</span>(layers)</span><br><span class="line">    p = &#123;&#125;</span><br><span class="line">    <span class="comment"># print(l)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l):</span><br><span class="line">        p[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(i)] = w[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(i)][:]</span><br><span class="line">        p[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(i)] = w[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(i)][:]</span><br><span class="line">    <span class="keyword">return</span> p, layers</span><br></pre></td></tr></table></figure><p>第二步，有了相应功能的函数，我们就可以进行训练。train.py里的具体内容如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DeepNET</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> function</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 计时开始</span></span><br><span class="line">    start1 = time.time()</span><br><span class="line">    train_image_path = <span class="string">&#x27;./MNIST/train-images-idx3-ubyte/train-images.idx3-ubyte&#x27;</span></span><br><span class="line">    train_lable_path = <span class="string">&#x27;./MNIST/train-labels-idx1-ubyte/train-labels.idx1-ubyte&#x27;</span></span><br><span class="line">    teat_image_path = <span class="string">&#x27;./MNIST/t10k-images-idx3-ubyte/t10k-images.idx3-ubyte&#x27;</span></span><br><span class="line">    teat_lable_path = <span class="string">&#x27;./MNIST/t10k-labels-idx1-ubyte/t10k-labels.idx1-ubyte&#x27;</span></span><br><span class="line">    <span class="comment"># #加载数据</span></span><br><span class="line">    train_image = function.jiexi_image(train_image_path)</span><br><span class="line">    train_lable = function.jiexi_label(train_lable_path)</span><br><span class="line">    teat_image = function.jiexi_image(teat_image_path)</span><br><span class="line">    test_lable = function.jiexi_label(teat_lable_path)</span><br><span class="line">    <span class="comment"># print(train_image.shape)</span></span><br><span class="line"></span><br><span class="line">    function.plot_data(train_image,train_lable,<span class="number">10</span>,<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    train_image = train_image.reshape(train_image.shape[<span class="number">0</span>], -<span class="number">1</span>).T / <span class="number">255</span></span><br><span class="line">    teat_image = teat_image.reshape(teat_image.shape[<span class="number">0</span>], -<span class="number">1</span>).T / <span class="number">255</span></span><br><span class="line">    train_lable1 = function.label_init(train_lable)</span><br><span class="line">    test_lable1 =  function.label_init(test_lable)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(train_image.shape)</span><br><span class="line"></span><br><span class="line">    end1 = time.time()</span><br><span class="line"></span><br><span class="line">    start2 = time.time()</span><br><span class="line">    layers = [<span class="number">784</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">10</span>]</span><br><span class="line">    parameters = DeepNET.deepnet(train_image, train_lable1,layers , learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,</span><br><span class="line">                                 step=<span class="number">100</span>, print_cost=<span class="literal">True</span>, isPlot=<span class="literal">True</span>)</span><br><span class="line">    end2 = time.time()</span><br><span class="line"></span><br><span class="line">    p ,error_list_train,zql1 = DeepNET.predict(train_image, train_lable1, parameters, train_lable)</span><br><span class="line">    p0 ,error_list_test ,zql2 = DeepNET.predict(teat_image,test_lable1,parameters,test_lable)</span><br><span class="line">    zql = [[zql1],[zql2]]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据加载时间：&quot;</span>,end1-start1,<span class="string">&quot; 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型训练时间：&quot;</span>,end2-start2,<span class="string">&quot; 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    DeepNET.save_h5(parameters,layers,zql)</span><br></pre></td></tr></table></figure><h2 id="五、效果展示">五、效果展示</h2><p>（1）训练情况</p><p><img src="https://api.smain.cn/pics/pic_e2d179c3.png" alt="pic_e2d179c3.png"></p><p><img src="https://api.smain.cn/pics/pic_ab550433.png" alt="pic_ab550433.png"></p><p>（2）模型保存情况 h5数据情况</p><p><img src="https://api.smain.cn/pics/pic_13424eed.png" alt="pic_13424eed.png"></p><p><img src="https://api.smain.cn/pics/pic_f32dcf6f.png" alt="pic_f32dcf6f.png"></p><p><img src="https://api.smain.cn/pics/pic_4e58a9c2.png" alt="pic_4e58a9c2.png"></p><p><img src="https://api.smain.cn/pics/pic_8228a183.png" alt="pic_8228a183.png"></p><p><img src="https://api.smain.cn/pics/pic_62d5e92a.png" alt="pic_62d5e92a.png"></p><p>最终效果</p><p><img src="https://api.smain.cn/pics/pic_6a9cc22c.png" alt="pic_6a9cc22c.png"></p><p><img src="https://api.smain.cn/pics/pic_5b3a3b40.png" alt="pic_5b3a3b40.png"></p><p>综合来说，没有加优化正确率也是不错的，感兴趣的可以对网络进行优化。</p><h2 id="六、画板部分">六、画板部分</h2><p>这里参考的是<a href="https://blog.csdn.net/CreatorGG/article/details/81542837">(311条消息) PyQt5实例 画板小程序_pyqt5画图板_CreatorGG的博客-CSDN博客</a></p><p>对qtpy5感兴趣的可以去学习一下。</p><p>整个手绘板加训练的程序在最后给出。</p><h2 id="七、直接抄，直接方向跑！">七、直接抄，直接方向跑！</h2><p>训练网络，<a href="http://xn--train-tj4o143b.py">运行train.py</a>。</p><p>训练出自己的网络后，使用main.py运行利用使用你的模型。</p><p>文件结构和目录：</p><p><img src="https://api.smain.cn/pics/pic_eda43f89.png" alt="pic_eda43f89.png"></p><p>创建我红线的文件。</p><p>（1）function.py代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此文件是一些函数 有加载数据模块</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_image</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 用二进制读取</span></span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;iiii&#x27;</span></span><br><span class="line">    magic_number, num_images, num_rows, num_cols = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;魔数:%d, 图片数量: %d张, 图片大小: %d*%d&#x27;</span> % (magic_number, num_images, num_rows, num_cols))</span><br><span class="line">    image_size = num_rows * num_cols</span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;&#x27;</span> + <span class="built_in">str</span>(image_size) + <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    images = np.empty((num_images, num_rows, num_cols))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已解析 %d&#x27;</span> % (i + <span class="number">1</span>) + <span class="string">&#x27;张&#x27;</span>)</span><br><span class="line">        images[i] = np.array(struct.unpack_from(fmt_image, data, offset)).reshape((num_rows, num_cols))</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> images</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiexi_label</span>(<span class="params">path</span>):</span><br><span class="line">    data = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    fmt_header = <span class="string">&#x27;&gt;ii&#x27;</span></span><br><span class="line">    magic_number, num_images = struct.unpack_from(fmt_header, data, offset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;魔数:%d, 图片数量: %d张&#x27;</span> % (magic_number, num_images))</span><br><span class="line">    <span class="comment"># 解析数据集</span></span><br><span class="line">    offset += struct.calcsize(fmt_header)</span><br><span class="line">    fmt_image = <span class="string">&#x27;&gt;B&#x27;</span></span><br><span class="line">    labels = np.empty(num_images)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已解析 %d&#x27;</span> % (i + <span class="number">1</span>) + <span class="string">&#x27;张&#x27;</span>)</span><br><span class="line">        labels[i] = struct.unpack_from(fmt_image, data, offset)[<span class="number">0</span>]</span><br><span class="line">        offset += struct.calcsize(fmt_image)</span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_data</span>(<span class="params">images,labels,n,issave = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(labels[i])</span><br><span class="line">        plt.imshow(images[i], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># if(issave == True):</span></span><br><span class="line">            <span class="comment"># plt.savefig(fname = &quot;save&quot;+str(datetime.datetime.now())+&quot;.jpg&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 说明：输入原始图像路径和新建图像文件夹名称 默认修改出长度宽度为64*64</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stdimage</span>(<span class="params">pathorg, name, pathnew=<span class="literal">None</span>, width=<span class="number">64</span>, length=<span class="number">64</span></span>):</span><br><span class="line">    <span class="comment"># 检查文件是否建立</span></span><br><span class="line">    <span class="keyword">if</span> pathnew == <span class="literal">None</span>:  <span class="comment"># 如果没有手动创建</span></span><br><span class="line">        tage = os.path.exists(os.getcwd() + <span class="string">&#x27;\\&#x27;</span> + name)  <span class="comment"># 检查一下是否属实</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage:  <span class="comment"># 没有整个新文件夹</span></span><br><span class="line">            os.mkdir(os.getcwd() + <span class="string">&quot;\\&quot;</span> + name)  <span class="comment"># 创建文件夹，name</span></span><br><span class="line">        image_path = os.getcwd() + <span class="string">&quot;\\&quot;</span> + name + <span class="string">&quot;\\&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 已经手动创建</span></span><br><span class="line">        tage = os.path.exists(pathnew + <span class="string">&quot;\\&quot;</span> + name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage:</span><br><span class="line">            path = os.getcwd()</span><br><span class="line">            os.mkdir(path + <span class="string">&quot;\\&quot;</span> + name)</span><br><span class="line">        image_path = path + <span class="string">&quot;\\&quot;</span> + name + <span class="string">&quot;\\&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 开始处理</span></span><br><span class="line">    i = <span class="number">1</span>  <span class="comment"># 从一开始</span></span><br><span class="line">    list_name = os.listdir(pathorg)  <span class="comment"># 获取图片名称列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_name:</span><br><span class="line">        <span class="comment"># 检查是否有图片</span></span><br><span class="line">        tage = os.path.exists(pathorg + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage:</span><br><span class="line">            image = Image.<span class="built_in">open</span>(pathorg + <span class="string">&#x27;\\&#x27;</span> + item)</span><br><span class="line">            std = image.resize((width, length), Image.ANTIALIAS)</span><br><span class="line">            <span class="comment">## 模式为RGB</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> std.mode == <span class="string">&quot;RGB&quot;</span>:</span><br><span class="line">                std = std.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">            std.save(image_path + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label_init</span>(<span class="params">lable</span>):</span><br><span class="line">    n = lable.shape[<span class="number">0</span>]</span><br><span class="line">    label_Y = np.zeros([<span class="number">10</span>, n])</span><br><span class="line">    res = lable.astype(<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, label_Y.shape[<span class="number">1</span>]):</span><br><span class="line">        label_Y[res[i], i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> label_Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_X</span>(<span class="params">path</span>):</span><br><span class="line">    im_name_list = os.listdir(path)</span><br><span class="line">    all_data = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> im_name_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            all_data.append(plt.imread(path + <span class="string">&#x27;\\&#x27;</span> + item).tolist())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(item + <span class="string">&quot; open error &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> all_data</span><br></pre></td></tr></table></figure><p>（2）<a href="http://DeepNet.py">DeepNet.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">Z</span>):</span><br><span class="line">    A = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    s = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    dZ = dA * s * (<span class="number">1</span>-s)</span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># relu函数 和反向求导</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">Z</span>):</span><br><span class="line">    A = np.maximum(<span class="number">0</span>,Z)</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu_backward</span>(<span class="params">dA, cache</span>):</span><br><span class="line">    Z = cache</span><br><span class="line">    dZ = np.array(dA, copy=<span class="literal">True</span>)</span><br><span class="line">    dZ[Z &lt;= <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Softmax</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">Z</span>):</span><br><span class="line">    A = np.exp(Z)/np.<span class="built_in">sum</span>(np.exp(Z),axis=<span class="number">0</span>)</span><br><span class="line">    cache = Z</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"><span class="comment"># 初始化w</span></span><br><span class="line"><span class="comment"># def INIT_W(n_x,n_h1,n_h2,n_y):</span></span><br><span class="line"><span class="comment">#     W1 = np.random.randn(n_h1, n_x ) * 0.01</span></span><br><span class="line"><span class="comment">#     b1 = np.zeros((n_h1, 1))</span></span><br><span class="line"><span class="comment">#     W2 = np.random.randn(n_h2,n_h1)*0.01</span></span><br><span class="line"><span class="comment">#     b2 = np.zeros((n_h2,1))</span></span><br><span class="line"><span class="comment">#     W3 = np.random.randn(n_y, n_h2) * 0.01</span></span><br><span class="line"><span class="comment">#     b3 = np.zeros((n_y, 1))</span></span><br><span class="line"><span class="comment">#     INIT = &#123;</span></span><br><span class="line"><span class="comment">#         &quot;W1&quot; : W1,</span></span><br><span class="line"><span class="comment">#         &quot;b1&quot; : b1,</span></span><br><span class="line"><span class="comment">#         &quot;W2&quot; : W2,</span></span><br><span class="line"><span class="comment">#         &quot;b2&quot; : b2,</span></span><br><span class="line"><span class="comment">#         &quot;W3&quot; : W3,</span></span><br><span class="line"><span class="comment">#         &quot;b3&quot; : b3</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment">#     return INIT</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_W</span>(<span class="params">layers_dims</span>):</span><br><span class="line">    np.random.seed(<span class="number">3</span>)</span><br><span class="line">    parameters = &#123;&#125;</span><br><span class="line">    L = <span class="built_in">len</span>(layers_dims)</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">        parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l)] = np.random.randn(layers_dims[l], layers_dims[l - <span class="number">1</span>]) / np.sqrt(layers_dims[l - <span class="number">1</span>])</span><br><span class="line">        parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l)] = np.zeros((layers_dims[l], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向前</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L_forword_sum</span>(<span class="params">W,A,b</span>):</span><br><span class="line">    Z = np.dot(W,A)+b</span><br><span class="line">    cache = (A,W,b)</span><br><span class="line">    <span class="keyword">return</span> Z,cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L_activate_forworld</span>(<span class="params">A_prev,W,b,activation</span>):</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        Z ,linear_cache =  L_forword_sum(W,A_prev,b)</span><br><span class="line">        A, activation_cache = relu(Z)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        Z, linear_cache = L_forword_sum(W, A_prev, b)</span><br><span class="line">        A, activation_cache = sigmoid(Z)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        Z, linear_cache = L_forword_sum(W, A_prev, b)</span><br><span class="line">        A, activation_cache = softmax(Z)</span><br><span class="line">    cache = (linear_cache, activation_cache)</span><br><span class="line">    <span class="keyword">return</span> A,cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L_forword</span>(<span class="params">X, parameters</span>):</span><br><span class="line">    caches = []</span><br><span class="line">    A = X</span><br><span class="line">    L = <span class="built_in">len</span>(parameters) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, L):</span><br><span class="line">        A_prev = A</span><br><span class="line">        A, cache = L_activate_forworld(A_prev, parameters[<span class="string">&#x27;W&#x27;</span> + <span class="built_in">str</span>(l)], parameters[<span class="string">&#x27;b&#x27;</span> + <span class="built_in">str</span>(l)], <span class="string">&quot;relu&quot;</span>)</span><br><span class="line">        caches.append(cache)</span><br><span class="line">    <span class="comment"># 最后一层使用softmax</span></span><br><span class="line">    AL, cache  = L_activate_forworld(A, parameters[<span class="string">&#x27;W&#x27;</span> + <span class="built_in">str</span>(L)], parameters[<span class="string">&#x27;b&#x27;</span> + <span class="built_in">str</span>(L)], <span class="string">&quot;softmax&quot;</span>)</span><br><span class="line">    caches.append(cache)</span><br><span class="line">    <span class="keyword">return</span> AL, caches</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算代价</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">Y_out,Y</span>):</span><br><span class="line">    cost = -np.<span class="built_in">sum</span>(np.multiply(np.log(Y_out), Y)) / Y_out.shape[<span class="number">1</span>]</span><br><span class="line">    cost = np.squeeze(cost)</span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line"></span><br><span class="line"><span class="comment">#线性返回</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_backward</span>(<span class="params">dZ, cache</span>):</span><br><span class="line">    A_prev, W, b = cache</span><br><span class="line">    m = A_prev.shape[<span class="number">1</span>]</span><br><span class="line">    dW = np.dot(dZ, A_prev.T) / m</span><br><span class="line">    db = np.<span class="built_in">sum</span>(dZ, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>) / m</span><br><span class="line">    dA_prev = np.dot(W.T, dZ)</span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_activation_backward</span>(<span class="params">dA, cache, Y,activation=<span class="string">&quot;relu&quot;</span></span>):</span><br><span class="line">    linear_cache, activation_cache = cache</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        dZ = relu_backward(dA, activation_cache)</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        dZ = sigmoid_backward(dA, activation_cache)</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        dZ = dA - Y</span><br><span class="line">        dA_prev, dW, db = linear_backward(dZ, linear_cache)</span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L_model_backward</span>(<span class="params">AL, Y, caches,<span class="keyword">case</span></span>):</span><br><span class="line">    grads = &#123;&#125;</span><br><span class="line">    L = <span class="built_in">len</span>(caches)</span><br><span class="line">    m = AL.shape[<span class="number">1</span>]</span><br><span class="line">    Y = Y.reshape(AL.shape)</span><br><span class="line">    dAL = - (np.divide(Y, AL) - np.divide(<span class="number">1</span> - Y, <span class="number">1</span> - AL))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">case</span> == <span class="string">&quot;softmax&quot;</span>:</span><br><span class="line">        current_cache = caches[L - <span class="number">1</span>]</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(L)] = linear_activation_backward(AL, current_cache,Y,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">case</span>  == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        current_cache = caches[L - <span class="number">1</span>]</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(L)], grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(L)] = linear_activation_backward(AL, current_cache,Y, <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(L - <span class="number">1</span>)):</span><br><span class="line">        current_cache = caches[l]</span><br><span class="line">        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(l + <span class="number">2</span>)], current_cache, Y ,<span class="string">&quot;relu&quot;</span>)</span><br><span class="line">        grads[<span class="string">&quot;dA&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = dA_prev_temp</span><br><span class="line">        grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = dW_temp</span><br><span class="line">        grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = db_temp</span><br><span class="line">    <span class="keyword">return</span> grads</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_parameters</span>(<span class="params">parameters, grads, learning_rate</span>):</span><br><span class="line">    L = <span class="built_in">len</span>(parameters) // <span class="number">2</span>  <span class="comment"># 整除</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(L):</span><br><span class="line">        parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = parameters[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] - learning_rate * grads[<span class="string">&quot;dW&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)]</span><br><span class="line">        parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] = parameters[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)] - learning_rate * grads[<span class="string">&quot;db&quot;</span> + <span class="built_in">str</span>(l + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deepnet</span>(<span class="params">X, Y,net_layers,learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,step =<span class="number">1</span>, print_cost=<span class="literal">False</span>, isPlot=<span class="literal">True</span></span>):</span><br><span class="line">    np.random.seed(<span class="number">1</span>) <span class="comment">#设计种子</span></span><br><span class="line">    costs = [] <span class="comment">#用于画图</span></span><br><span class="line">    parameters = init_W(net_layers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_iterations):</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        AL, caches = L_forword(X, parameters)</span><br><span class="line"></span><br><span class="line">        costi = cost(AL, Y) <span class="comment">#这里的Y是标准化的Y</span></span><br><span class="line"></span><br><span class="line">        grads = L_model_backward(AL, Y, caches,<span class="string">&quot;softmax&quot;</span>)</span><br><span class="line"></span><br><span class="line">        parameters = update_parameters(parameters, grads, learning_rate)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录成本</span></span><br><span class="line">            costs.append(costi)</span><br><span class="line">            <span class="comment"># 是否打印成本值</span></span><br><span class="line">            <span class="keyword">if</span> print_cost:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>, i, <span class="string">&quot;次迭代，成本值为：&quot;</span>, np.squeeze(costi))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPlot:</span><br><span class="line">        plt.plot(np.squeeze(costs))</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;iterations (per tens)&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;Learning rate =&quot;</span> + <span class="built_in">str</span>(learning_rate))</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># plt.savefig(fnme = &quot;cast&quot;+str(datetime.datetime.now())+&quot;.jig&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">X, y, parameters,Y_org</span>):</span><br><span class="line"></span><br><span class="line">    m = X.shape[<span class="number">1</span>]</span><br><span class="line">    n = <span class="built_in">len</span>(parameters) // <span class="number">2</span>  <span class="comment"># 神经网络的层数</span></span><br><span class="line">    p = np.zeros((<span class="number">1</span>, m))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据参数前向传播</span></span><br><span class="line">    probas, caches = L_forword(X, parameters)</span><br><span class="line">    p = np.argmax(probas,axis=<span class="number">0</span>)</span><br><span class="line">    zql = <span class="built_in">float</span>(np.<span class="built_in">sum</span>((p == Y_org)) / m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确度为: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">float</span>(np.<span class="built_in">sum</span>((p == Y_org)) / m)))</span><br><span class="line"></span><br><span class="line">    error_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> p[i] != Y_org[i]:</span><br><span class="line">            error_list.append(i)</span><br><span class="line">    <span class="keyword">return</span> p,error_list,zql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">parameters</span>):</span><br><span class="line">    np.set_printoptions(threshold=sys.maxsize)</span><br><span class="line"></span><br><span class="line">    model_number = <span class="number">0</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;model/model&quot;</span> + <span class="built_in">str</span>(model_number) + <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(datetime.datetime.now()) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;model_number &quot;</span> + <span class="built_in">str</span>(model_number) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> parameters.items():</span><br><span class="line">        f.write(<span class="built_in">str</span>(i) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(j) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存为h5数据格式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_h5</span>(<span class="params">data,layers,zql</span>):</span><br><span class="line">    str1 = <span class="string">&quot;./model/model&quot;</span>+<span class="built_in">str</span>(datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>))+<span class="string">&quot;.h5&quot;</span></span><br><span class="line">    f = h5py.File(str1, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    ID = [<span class="string">&quot;model layer &quot;</span>]</span><br><span class="line">    f.create_dataset(<span class="string">&quot;layers&quot;</span>,data = layers)</span><br><span class="line">    i = <span class="built_in">len</span>(data) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        f.create_dataset(<span class="string">&quot;W&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>),data = data[<span class="string">&quot;W&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)])</span><br><span class="line">        f.create_dataset(<span class="string">&quot;b&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>),data = data[<span class="string">&quot;b&quot;</span>+<span class="built_in">str</span>(j+<span class="number">1</span>)])</span><br><span class="line">    f.create_dataset(<span class="string">&quot;accuracy&quot;</span>,data = zql)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict1</span>(<span class="params">X, parameters</span>):</span><br><span class="line">    <span class="comment"># 根据参数前向传播</span></span><br><span class="line">    probas, caches = L_forword(X, parameters)</span><br><span class="line">    p = np.argmax(probas,axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_ccs</span>(<span class="params">path</span>):</span><br><span class="line">    w = h5py.File(path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    layers = w[<span class="string">&quot;layers&quot;</span>][:]</span><br><span class="line">    l = <span class="built_in">len</span>(layers)</span><br><span class="line">    p = &#123;&#125;</span><br><span class="line">    <span class="comment"># print(l)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, l):</span><br><span class="line">        p[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(i)] = w[<span class="string">&quot;W&quot;</span> + <span class="built_in">str</span>(i)][:]</span><br><span class="line">        p[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(i)] = w[<span class="string">&quot;b&quot;</span> + <span class="built_in">str</span>(i)][:]</span><br><span class="line">    <span class="keyword">return</span> p, layers</span><br></pre></td></tr></table></figure><p>(3)<a href="http://train.py">train.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DeepNET</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 计时开始</span></span><br><span class="line">    start1 = time.time()</span><br><span class="line">    train_image_path = <span class="string">&#x27;./MNIST/train-images-idx3-ubyte/train-images.idx3-ubyte&#x27;</span></span><br><span class="line">    train_lable_path = <span class="string">&#x27;./MNIST/train-labels-idx1-ubyte/train-labels.idx1-ubyte&#x27;</span></span><br><span class="line">    teat_image_path = <span class="string">&#x27;./MNIST/t10k-images-idx3-ubyte/t10k-images.idx3-ubyte&#x27;</span></span><br><span class="line">    teat_lable_path = <span class="string">&#x27;./MNIST/t10k-labels-idx1-ubyte/t10k-labels.idx1-ubyte&#x27;</span></span><br><span class="line">    <span class="comment"># #加载数据</span></span><br><span class="line">    train_image = function.jiexi_image(train_image_path)</span><br><span class="line">    train_lable = function.jiexi_label(train_lable_path)</span><br><span class="line">    teat_image = function.jiexi_image(teat_image_path)</span><br><span class="line">    test_lable = function.jiexi_label(teat_lable_path)</span><br><span class="line">    <span class="comment"># print(train_image.shape)</span></span><br><span class="line"></span><br><span class="line">    function.plot_data(train_image,train_lable,<span class="number">10</span>,<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    train_image = train_image.reshape(train_image.shape[<span class="number">0</span>], -<span class="number">1</span>).T / <span class="number">255</span></span><br><span class="line">    teat_image = teat_image.reshape(teat_image.shape[<span class="number">0</span>], -<span class="number">1</span>).T / <span class="number">255</span></span><br><span class="line">    train_lable1 = function.label_init(train_lable)</span><br><span class="line">    test_lable1 =  function.label_init(test_lable)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(train_image.shape)</span><br><span class="line"></span><br><span class="line">    end1 = time.time()</span><br><span class="line"></span><br><span class="line">    start2 = time.time()</span><br><span class="line">    layers = [<span class="number">784</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">10</span>]</span><br><span class="line">    parameters = DeepNET.deepnet(train_image, train_lable1,layers , learning_rate=<span class="number">0.0075</span>, num_iterations=<span class="number">3000</span>,</span><br><span class="line">                                 step=<span class="number">100</span>, print_cost=<span class="literal">True</span>, isPlot=<span class="literal">True</span>)</span><br><span class="line">    end2 = time.time()</span><br><span class="line"></span><br><span class="line">    p ,error_list_train,zql1 = DeepNET.predict(train_image, train_lable1, parameters, train_lable)</span><br><span class="line">    p0 ,error_list_test ,zql2 = DeepNET.predict(teat_image,test_lable1,parameters,test_lable)</span><br><span class="line">    zql = [[zql1],[zql2]]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据加载时间：&quot;</span>,end1-start1,<span class="string">&quot; 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型训练时间：&quot;</span>,end2-start2,<span class="string">&quot; 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    DeepNET.save_h5(parameters,layers,zql)</span><br></pre></td></tr></table></figure><p>(4) <a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载库</span></span><br><span class="line"><span class="keyword">from</span> MainWidget <span class="keyword">import</span> MainWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    mainWidget = MainWidget()  <span class="comment"># 新建一个主界面</span></span><br><span class="line">    mainWidget.show()  <span class="comment"># 显示主界面</span></span><br><span class="line"></span><br><span class="line">    exit(app.exec_())  <span class="comment"># 进入消息循环</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>(5)<a href="http://mainwidget.py">mainwidget.py</a></p><p>使用画板程序之前得跟该你的模型路径名字。就是红色部分。</p><p>def yuce(self):<br># #标准化图片 获取Y<br>savePath = “./image_rgzn/test.png”<br>image = self.__paintBoard.GetContentAsQImage()<br>image.save(savePath)<br>img = Image.open(savePath)<br>img = img.convert(“I”)<br>img = img.resize((28, 28))<br>x = np.array(img)<br>train_image = x.reshape(1, -1).T / 255<br>w,layer = DeepNET.read_ccs(“./model/model20221119225104.h5”)<br>p = DeepNET.predict1(train_image,w)<br>self.__text_out.setText(str(p[0]))<br>print§<br># print(“hello”)<br># res = QMessageBox.information(self,“人工智能判断为：”,str§,<a href="http://QMessageBox.Yes%7CQMessageBox.No">QMessageBox.Yes|QMessageBox.No</a>)<br># res.exec_()<br># 读取数据权重</p><p># 预测并输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on 2018年8月8日</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Freedom</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> QWidget, QColor, QPixmap, QIcon, QSize, QCheckBox</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout, QVBoxLayout, QPushButton, QSplitter, \</span><br><span class="line">    QComboBox, QLabel, QSpinBox, QFileDialog,QTextEdit</span><br><span class="line"><span class="keyword">from</span> PaintBoard <span class="keyword">import</span> PaintBoard</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> DeepNET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWidget</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Constructor</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(Parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__InitData()  <span class="comment"># 先初始化数据，再初始化界面</span></span><br><span class="line">        <span class="variable language_">self</span>.__InitView()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__InitData</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                  初始化成员变量</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.__paintBoard = PaintBoard(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 获取颜色列表(字符串类型)</span></span><br><span class="line">        <span class="variable language_">self</span>.__colorList = QColor.colorNames()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__InitView</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                  初始化界面</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.setFixedSize(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;PaintBoard Example PyQt5&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新建一个水平布局作为本窗体的主布局</span></span><br><span class="line">        main_layout = QHBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 设置主布局内边距以及控件间距为10px</span></span><br><span class="line">        main_layout.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在主界面左侧放置画板</span></span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.__paintBoard)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新建垂直子布局用于放置按键</span></span><br><span class="line">        sub_layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置此子布局和内部控件的间距为10px</span></span><br><span class="line">        sub_layout.setContentsMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__btn_Clear = QPushButton(<span class="string">&quot;清空画板&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__btn_Clear.setParent(<span class="variable language_">self</span>)  <span class="comment"># 设置父对象为本界面</span></span><br><span class="line">        <span class="comment"># 将按键按下信号与画板清空函数相关联</span></span><br><span class="line">        <span class="variable language_">self</span>.__btn_Clear.clicked.connect(<span class="variable language_">self</span>.__paintBoard.Clear)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__btn_Clear)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__btn_yuce = QPushButton(<span class="string">&quot;人工智能预测&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__btn_yuce.setParent(<span class="variable language_">self</span>)  <span class="comment"># 设置父对象为本界面</span></span><br><span class="line">        <span class="variable language_">self</span>.__btn_yuce.clicked.connect(<span class="keyword">lambda</span>:<span class="variable language_">self</span>.yuce())</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__btn_yuce)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__text_out = QTextEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__text_out.setParent(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__text_out.setObjectName(<span class="string">&quot;预测结果为：&quot;</span>)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__text_out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__btn_Quit = QPushButton(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__btn_Quit.setParent(<span class="variable language_">self</span>)  <span class="comment"># 设置父对象为本界面</span></span><br><span class="line">        <span class="variable language_">self</span>.__btn_Quit.clicked.connect(<span class="variable language_">self</span>.Quit)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__btn_Quit)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__btn_Save = QPushButton(<span class="string">&quot;保存作品&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__btn_Save.setParent(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__btn_Save.clicked.connect(<span class="variable language_">self</span>.on_btn_Save_Clicked)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__btn_Save)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__cbtn_Eraser = QCheckBox(<span class="string">&quot;  使用橡皮擦&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__cbtn_Eraser.setParent(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__cbtn_Eraser.clicked.connect(<span class="variable language_">self</span>.on_cbtn_Eraser_clicked)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__cbtn_Eraser)</span><br><span class="line"></span><br><span class="line">        splitter = QSplitter(<span class="variable language_">self</span>)  <span class="comment"># 占位符</span></span><br><span class="line">        sub_layout.addWidget(splitter)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__label_penThickness = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__label_penThickness.setText(<span class="string">&quot;画笔粗细&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__label_penThickness.setFixedHeight(<span class="number">20</span>)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__label_penThickness)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness = QSpinBox(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness.setMaximum(<span class="number">40</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness.setMinimum(<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness.setValue(<span class="number">20</span>)  <span class="comment"># 默认粗细为10</span></span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness.setSingleStep(<span class="number">2</span>)  <span class="comment"># 最小变化值为2</span></span><br><span class="line">        <span class="variable language_">self</span>.__spinBox_penThickness.valueChanged.connect(</span><br><span class="line">            <span class="variable language_">self</span>.on_PenThicknessChange)  <span class="comment"># 关联spinBox值变化信号和函数on_PenThicknessChange</span></span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__spinBox_penThickness)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__label_penColor = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__label_penColor.setText(<span class="string">&quot;画笔颜色&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__label_penColor.setFixedHeight(<span class="number">20</span>)</span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__label_penColor)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__comboBox_penColor = QComboBox(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.__fillColorList(<span class="variable language_">self</span>.__comboBox_penColor)  <span class="comment"># 用各种颜色填充下拉列表</span></span><br><span class="line">        <span class="variable language_">self</span>.__comboBox_penColor.currentIndexChanged.connect(</span><br><span class="line">            <span class="variable language_">self</span>.on_PenColorChange)  <span class="comment"># 关联下拉列表的当前索引变更信号与函数on_PenColorChange</span></span><br><span class="line">        sub_layout.addWidget(<span class="variable language_">self</span>.__comboBox_penColor)</span><br><span class="line"></span><br><span class="line">        main_layout.addLayout(sub_layout)  <span class="comment"># 将子布局加入主布局</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fillColorList</span>(<span class="params">self, comboBox</span>):</span><br><span class="line"></span><br><span class="line">        index_black = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> color <span class="keyword">in</span> <span class="variable language_">self</span>.__colorList:</span><br><span class="line">            <span class="keyword">if</span> color == <span class="string">&quot;black&quot;</span>:</span><br><span class="line">                index_black = index</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            pix = QPixmap(<span class="number">70</span>, <span class="number">20</span>)</span><br><span class="line">            pix.fill(QColor(color))</span><br><span class="line">            comboBox.addItem(QIcon(pix), <span class="literal">None</span>)</span><br><span class="line">            comboBox.setIconSize(QSize(<span class="number">70</span>, <span class="number">20</span>))</span><br><span class="line">            comboBox.setSizeAdjustPolicy(QComboBox.AdjustToContents)</span><br><span class="line"></span><br><span class="line">        comboBox.setCurrentIndex(index_black)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_PenColorChange</span>(<span class="params">self</span>):</span><br><span class="line">        color_index = <span class="variable language_">self</span>.__comboBox_penColor.currentIndex()</span><br><span class="line">        color_str = <span class="variable language_">self</span>.__colorList[color_index]</span><br><span class="line">        <span class="variable language_">self</span>.__paintBoard.ChangePenColor(color_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_PenThicknessChange</span>(<span class="params">self</span>):</span><br><span class="line">        penThickness = <span class="variable language_">self</span>.__spinBox_penThickness.value()</span><br><span class="line">        <span class="variable language_">self</span>.__paintBoard.ChangePenThickness(penThickness)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_btn_Save_Clicked</span>(<span class="params">self</span>):</span><br><span class="line">        savePath = QFileDialog.getSaveFileName(<span class="variable language_">self</span>, <span class="string">&#x27;Save Your Paint&#x27;</span>, <span class="string">&#x27;.\\&#x27;</span>, <span class="string">&#x27;*.png&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(savePath)</span><br><span class="line">        <span class="keyword">if</span> savePath[<span class="number">0</span>] == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Save cancel&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        image = <span class="variable language_">self</span>.__paintBoard.GetContentAsQImage()</span><br><span class="line">        image.save(savePath[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_cbtn_Eraser_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.__cbtn_Eraser.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.__paintBoard.EraserMode = <span class="literal">True</span>  <span class="comment"># 进入橡皮擦模式</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.__paintBoard.EraserMode = <span class="literal">False</span>  <span class="comment"># 退出橡皮擦模式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Quit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">yuce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># #标准化图片 获取Y</span></span><br><span class="line">        savePath = <span class="string">&quot;./image_rgzn/test.png&quot;</span></span><br><span class="line">        image = <span class="variable language_">self</span>.__paintBoard.GetContentAsQImage()</span><br><span class="line">        image.save(savePath)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(savePath)</span><br><span class="line">        img = img.convert(<span class="string">&quot;I&quot;</span>)</span><br><span class="line">        img = img.resize((<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line">        x = np.array(img)</span><br><span class="line">        train_image = x.reshape(<span class="number">1</span>, -<span class="number">1</span>).T / <span class="number">255</span></span><br><span class="line">        w,layer = DeepNET.read_ccs(<span class="string">&quot;./model/model20221119225104.h5&quot;</span>)</span><br><span class="line">        p = DeepNET.predict1(train_image,w)</span><br><span class="line">        <span class="variable language_">self</span>.__text_out.setText(<span class="built_in">str</span>(p[<span class="number">0</span>]))</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="comment"># print(&quot;hello&quot;)</span></span><br><span class="line">        <span class="comment"># res = QMessageBox.information(self,&quot;人工智能判断为：&quot;,str(p),QMessageBox.Yes|QMessageBox.No)</span></span><br><span class="line">        <span class="comment"># res.exec_()</span></span><br><span class="line">        <span class="comment"># 读取数据权重</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 预测并输出</span></span><br></pre></td></tr></table></figure><p>(6)<a href="http://paintboard.py">paintboard.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Created on 2018年8月9日</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Freedom</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> QPixmap, QPainter, QPoint, QPaintEvent, QMouseEvent, QPen, \</span><br><span class="line">    QColor, QSize</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaintBoard</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, Parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Constructor</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(Parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__InitData()  <span class="comment"># 先初始化数据，再初始化界面</span></span><br><span class="line">        <span class="variable language_">self</span>.__InitView()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__InitData</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__size = QSize(<span class="number">280</span>, <span class="number">280</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新建QPixmap作为画板，尺寸为__size</span></span><br><span class="line">        <span class="variable language_">self</span>.__board = QPixmap(<span class="variable language_">self</span>.__size)</span><br><span class="line">        <span class="variable language_">self</span>.__board.fill(Qt.black)  <span class="comment"># 用白色填充画板</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__IsEmpty = <span class="literal">True</span>  <span class="comment"># 默认为空画板</span></span><br><span class="line">        <span class="variable language_">self</span>.EraserMode = <span class="literal">False</span>  <span class="comment"># 默认为禁用橡皮擦模式</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__lastPos = QPoint(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 上一次鼠标位置</span></span><br><span class="line">        <span class="variable language_">self</span>.__currentPos = QPoint(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 当前的鼠标位置</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__painter = QPainter()  <span class="comment"># 新建绘图工具</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__thickness = <span class="number">10</span>  <span class="comment"># 默认画笔粗细为10px</span></span><br><span class="line">        <span class="variable language_">self</span>.__penColor = QColor(<span class="string">&quot;white&quot;</span>)  <span class="comment"># 设置默认画笔颜色为黑色</span></span><br><span class="line">        <span class="variable language_">self</span>.__colorList = QColor.colorNames()  <span class="comment"># 获取颜色列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__InitView</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置界面的尺寸为__size</span></span><br><span class="line">        <span class="variable language_">self</span>.setFixedSize(<span class="variable language_">self</span>.__size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 清空画板</span></span><br><span class="line">        <span class="variable language_">self</span>.__board.fill(Qt.black)</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line">        <span class="variable language_">self</span>.__IsEmpty = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ChangePenColor</span>(<span class="params">self, color=<span class="string">&quot;black&quot;</span></span>):</span><br><span class="line">        <span class="comment"># 改变画笔颜色</span></span><br><span class="line">        <span class="variable language_">self</span>.__penColor = QColor(color)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ChangePenThickness</span>(<span class="params">self, thickness=<span class="number">10</span></span>):</span><br><span class="line">        <span class="comment"># 改变画笔粗细</span></span><br><span class="line">        <span class="variable language_">self</span>.__thickness = thickness</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">IsEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 返回画板是否为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__IsEmpty</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetContentAsQImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取画板内容（返回QImage）</span></span><br><span class="line">        image = <span class="variable language_">self</span>.__board.toImage()</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, paintEvent</span>):</span><br><span class="line">        <span class="comment"># 绘图事件</span></span><br><span class="line">        <span class="comment"># 绘图时必须使用QPainter的实例，此处为__painter</span></span><br><span class="line">        <span class="comment"># 绘图在begin()函数与end()函数间进行</span></span><br><span class="line">        <span class="comment"># begin(param)的参数要指定绘图设备，即把图画在哪里</span></span><br><span class="line">        <span class="comment"># drawPixmap用于绘制QPixmap类型的对象</span></span><br><span class="line">        <span class="variable language_">self</span>.__painter.begin(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 0,0为绘图的左上角起点的坐标，__board即要绘制的图</span></span><br><span class="line">        <span class="variable language_">self</span>.__painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">self</span>.__board)</span><br><span class="line">        <span class="variable language_">self</span>.__painter.end()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, mouseEvent</span>):</span><br><span class="line">        <span class="comment"># 鼠标按下时，获取鼠标的当前位置保存为上一次位置</span></span><br><span class="line">        <span class="variable language_">self</span>.__currentPos = mouseEvent.pos()</span><br><span class="line">        <span class="variable language_">self</span>.__lastPos = <span class="variable language_">self</span>.__currentPos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, mouseEvent</span>):</span><br><span class="line">        <span class="comment"># 鼠标移动时，更新当前位置，并在上一个位置和当前位置间画线</span></span><br><span class="line">        <span class="variable language_">self</span>.__currentPos = mouseEvent.pos()</span><br><span class="line">        <span class="variable language_">self</span>.__painter.begin(<span class="variable language_">self</span>.__board)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.EraserMode == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># 非橡皮擦模式</span></span><br><span class="line">            <span class="variable language_">self</span>.__painter.setPen(QPen(<span class="variable language_">self</span>.__penColor, <span class="variable language_">self</span>.__thickness))  <span class="comment"># 设置画笔颜色，粗细</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 橡皮擦模式下画笔为纯白色，粗细为10</span></span><br><span class="line">            <span class="variable language_">self</span>.__painter.setPen(QPen(Qt.white, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画线</span></span><br><span class="line">        <span class="variable language_">self</span>.__painter.drawLine(<span class="variable language_">self</span>.__lastPos, <span class="variable language_">self</span>.__currentPos)</span><br><span class="line">        <span class="variable language_">self</span>.__painter.end()</span><br><span class="line">        <span class="variable language_">self</span>.__lastPos = <span class="variable language_">self</span>.__currentPos</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update()  <span class="comment"># 更新显示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, mouseEvent</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__IsEmpty = <span class="literal">False</span>  <span class="comment"># 画板不再为空</span></span><br></pre></td></tr></table></figure><p>感谢看完的读者，希望你们都可以对编程产生热爱！</p><p><img src="https://api.smain.cn/pics/pic_a215a5ab.png" alt="pic_a215a5ab.png"></p>]]></content>
    
    
    <summary type="html">用DNN做MINIST手写数字识别</summary>
    
    
    
    <category term="深度学习" scheme="https://macre.cn/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://macre.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="MINIST" scheme="https://macre.cn/tags/MINIST/"/>
    
    <category term="python" scheme="https://macre.cn/tags/python/"/>
    
    <category term="pyat" scheme="https://macre.cn/tags/pyat/"/>
    
  </entry>
  
  <entry>
    <title>诗歌</title>
    <link href="https://macre.cn/posts/cbfd48ab.html"/>
    <id>https://macre.cn/posts/cbfd48ab.html</id>
    <published>2023-08-20T18:43:32.000Z</published>
    <updated>2025-02-20T18:50:59.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/P/p2.png" alt=""></h2><h2 id="-2"><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/P/p1.png" alt=""></h2><h2 id="-3"><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/P/p3.png" alt=""></h2><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/P/p4.png" alt=""></p>]]></content>
    
    
    <summary type="html">写诗的地方</summary>
    
    
    
    <category term="诗歌" scheme="https://macre.cn/categories/%E8%AF%97%E6%AD%8C/"/>
    
    
    <category term="诗歌" scheme="https://macre.cn/tags/%E8%AF%97%E6%AD%8C/"/>
    
    <category term="文艺" scheme="https://macre.cn/tags/%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="https://macre.cn/posts/f9b01ad8.html"/>
    <id>https://macre.cn/posts/f9b01ad8.html</id>
    <published>2023-06-04T16:17:29.000Z</published>
    <updated>2025-02-20T17:46:03.409Z</updated>
    
    <content type="html"><![CDATA[<h1>逻辑回归</h1><h2 id="一、数据获取">一、数据获取</h2><p>通过爬虫获取图片数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;您要爬取什么图片&#x27;</span>)</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">num_1 = <span class="number">0</span></span><br><span class="line">num_2 = <span class="number">0</span></span><br><span class="line">x = <span class="built_in">input</span>(<span class="string">&#x27;您要爬取几张呢?，输入1等于60张图片。&#x27;</span>)</span><br><span class="line">list_1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(x)):</span><br><span class="line">    name_1 = os.getcwd()</span><br><span class="line">    name_2 = os.path.join(name_1,<span class="string">&#x27;图片&#x27;</span>)</span><br><span class="line">    url = <span class="string">&#x27;https://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=&#x27;</span>+name+<span class="string">&#x27;&amp;pn=&#x27;</span>+<span class="built_in">str</span>(i*<span class="number">30</span>)</span><br><span class="line">    res = requests.get(url,headers=headers)</span><br><span class="line">    htlm_1 = res.content.decode()</span><br><span class="line">    a = re.findall(<span class="string">&#x27;&quot;objURL&quot;:&quot;(.*?)&quot;,&#x27;</span>,htlm_1)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(name_2):</span><br><span class="line">        os.makedirs(name_2)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            b_1 = re.findall(<span class="string">&#x27;https:(.*?)&amp;&#x27;</span>,b)</span><br><span class="line">            b_2 = <span class="string">&#x27;&#x27;</span>.join(b_1)</span><br><span class="line">            <span class="keyword">if</span> b_2 <span class="keyword">not</span> <span class="keyword">in</span> list_1:</span><br><span class="line">                num = num +<span class="number">1</span></span><br><span class="line">                img = requests.get(b)</span><br><span class="line">                f = <span class="built_in">open</span>(os.path.join(name_1,<span class="string">&#x27;图片&#x27;</span>,name+<span class="built_in">str</span>(num)+<span class="string">&#x27;.png&#x27;</span>),<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;---------正在下载第&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;张图片----------&#x27;</span>)</span><br><span class="line">                f.write(img.content)</span><br><span class="line">                f.close()</span><br><span class="line">                list_1.append(b_2)</span><br><span class="line">            <span class="keyword">elif</span> b_2 <span class="keyword">in</span> list_1:</span><br><span class="line">                num_1 = num_1 + <span class="number">1</span> </span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---------第&#x27;</span>+<span class="built_in">str</span>(num)+<span class="string">&#x27;张图片无法下载----------&#x27;</span>)</span><br><span class="line">            num_2 = num_2 +<span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;下载完成,总共下载&#123;&#125;张,成功下载:&#123;&#125;张,重复下载:&#123;&#125;张,下载失败:&#123;&#125;张&#x27;</span>.<span class="built_in">format</span>(num+num_1+num_2,num,num_1,num_2))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/1.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/2.png" alt=""></p><h2 id="二、数据处理与数据集制作">二、数据处理与数据集制作</h2><p>本次学习，通过逻辑回归识别猪的图片。通过网络爬虫分别爬取猪，猫，狗的图片，来做是否是猪的预测。</p><p><strong>（1）数据处理</strong>：</p><ol><li>手动筛除一些图片</li><li>图片标准化 长度宽度为64*64</li></ol><p><strong>（2）标准化代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">## 说明：输入原始图像路径和新建图像文件夹名称 默认修改出长度宽度为64*64</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stdimage</span>(<span class="params">pathorg,name,pathnew=<span class="literal">None</span>,width=<span class="number">64</span>,length=<span class="number">64</span></span>):</span><br><span class="line">    <span class="comment">#检查文件是否建立</span></span><br><span class="line">    <span class="keyword">if</span> pathnew == <span class="literal">None</span>: <span class="comment"># 如果没有手动创建</span></span><br><span class="line">        tage = os.path.exists(os.getcwd()+<span class="string">&#x27;\\&#x27;</span>+name) <span class="comment">#检查一下是否属实</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage: <span class="comment">#没有整个新文件夹</span></span><br><span class="line">            os.mkdir(os.getcwd()+<span class="string">&quot;\\&quot;</span>+name) <span class="comment">#创建文件夹，name</span></span><br><span class="line">        image_path = os.getcwd()+<span class="string">&quot;\\&quot;</span>+name+<span class="string">&quot;\\&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment">#已经手动创建</span></span><br><span class="line">        tage = os.path.exists(pathnew+<span class="string">&quot;\\&quot;</span>+name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage:</span><br><span class="line">            path = os.getcwd()</span><br><span class="line">            os.mkdir(path+<span class="string">&quot;\\&quot;</span>+name)</span><br><span class="line">        image_path = path +<span class="string">&quot;\\&quot;</span>+name+<span class="string">&quot;\\&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">## 开始处理</span></span><br><span class="line">    i = <span class="number">1</span><span class="comment"># 从一开始 </span></span><br><span class="line">    list_name = os.listdir(pathorg) <span class="comment">#获取图片名称列表</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_name:</span><br><span class="line">        <span class="comment">#检查是否有图片</span></span><br><span class="line">        tage = os.path.exists(pathorg+<span class="built_in">str</span>(i)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tage:</span><br><span class="line">            image = Image.<span class="built_in">open</span>(pathorg+<span class="string">&#x27;\\&#x27;</span>+item)</span><br><span class="line">            std = image.resize((width,length),Image.ANTIALIAS)</span><br><span class="line">            <span class="comment">## 模式为RGB</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> std.mode == <span class="string">&quot;RGB&quot;</span>:</span><br><span class="line">                std = std.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">            std.save(image_path+<span class="built_in">str</span>(i)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>（3）数据集制作</strong></p><p>将图片数据制作成pyh5数据来保存，方便使用和共享。</p><p>首先将标准化好的图片变为numpy数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图片的numpy数组。</span></span><br><span class="line"><span class="comment"># 输入图片的path然后for循环建立rgb图片数组。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creatdata</span>(<span class="params">path</span>):</span><br><span class="line">    im_name_list = os.listdir(path)</span><br><span class="line">    all_data =[]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> im_name_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            all_data.append(plt.imread(path+<span class="string">&#x27;\\&#x27;</span>+item).tolist())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(item+<span class="string">&quot; open error &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> all_data</span><br><span class="line">data = creatdata(<span class="string">r&quot;F:\JupyterLab\CNN\stdimage&quot;</span>)</span><br></pre></td></tr></table></figure><p>再将data数据保存到pyh5文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">a = np.zeros((<span class="number">112</span>, <span class="number">1</span>))  <span class="comment"># 假设这是训练集的标签为0的数据</span></span><br><span class="line">b = np.ones((<span class="number">166</span>, <span class="number">1</span>))   <span class="comment"># 假设这是训练集的标签为1的数据</span></span><br><span class="line">c = np.vstack((a, b))   <span class="comment"># 合并标签数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 data 是训练集的特征数据</span></span><br><span class="line"><span class="comment"># data = ...  # 你需要定义 data，例如 data = np.random.rand(278, 64, 64, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别名称</span></span><br><span class="line">d = np.array([[<span class="string">&#x27;nopig&#x27;</span>], [<span class="string">&#x27;pig&#x27;</span>]], dtype=h5py.string_dtype())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入 HDF5 文件</span></span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">&quot;train_pig.h5&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.create_dataset(<span class="string">&quot;train_set_x&quot;</span>, data=data)  <span class="comment"># 确保 data 已定义</span></span><br><span class="line">    f.create_dataset(<span class="string">&quot;train_set_y&quot;</span>, data=c)</span><br><span class="line">    f.create_dataset(<span class="string">&quot;classes_list&quot;</span>, data=d)</span><br></pre></td></tr></table></figure><h2 id="三、逻辑回归">三、逻辑回归</h2><p><strong>（1）加载数据</strong></p><p>将我们制作好的数据取出来，并且可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">train_data = h5py.File(<span class="string">&quot;train_pig.h5&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">train_set_x_orig = np.array(train_data[<span class="string">&#x27;train_set_x&#x27;</span>][:])</span><br><span class="line">train_set_y_orig = np.array(train_data[<span class="string">&#x27;train_set_y&#x27;</span>][:])</span><br><span class="line">classes = np.array(train_data[<span class="string">&quot;classes_lsit&quot;</span>][:])</span><br><span class="line">train_set_y_orig=train_set_y_orig.reshape((<span class="number">1</span>,train_set_y_orig.shape[<span class="number">0</span>]))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_data</span>(<span class="params">a</span>):</span><br><span class="line">    plt.imshow(train_set_x_orig[a])</span><br><span class="line">plot_data(<span class="number">1</span>)</span><br><span class="line">plot_data(<span class="number">118</span>)</span><br></pre></td></tr></table></figure><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/3.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/4.png" alt=""></p><p><strong>（2）训练集</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_set_x_f = train_set_x_orig.reshape(train_set_x_orig.shape[<span class="number">0</span>],-<span class="number">1</span>).T</span><br></pre></td></tr></table></figure><p><strong>（3）逻辑回归</strong></p><p>准备好搭建的基本函数和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmod</span>(<span class="params">z</span>):</span><br><span class="line">    s= <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cast_TD</span>(<span class="params">w,b,X,Y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现前向和后向传播的成本函数及其梯度。</span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        w  - 权重，大小不等的数组（num_px * num_px * 3，1）</span></span><br><span class="line"><span class="string">        b  - 偏差，一个标量</span></span><br><span class="line"><span class="string">        X  - 矩阵类型为（num_px * num_px * 3，训练数量）</span></span><br><span class="line"><span class="string">        Y  - 真正的“标签”矢量（如果非猫则为0，如果是猫则为1），矩阵维度为(1,训练数据数量)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        cost- 逻辑回归的负对数似然成本</span></span><br><span class="line"><span class="string">        dw  - 相对于w的损失梯度，因此与w相同的形状</span></span><br><span class="line"><span class="string">        db  - 相对于b的损失梯度，因此与b的形状相同</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m = X.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##正向传播</span></span><br><span class="line">    <span class="comment">## j的定义式</span></span><br><span class="line">    A = sigmod(np.dot(w.T,X)+b)</span><br><span class="line">    cost = (-<span class="number">1</span>/m)*np.<span class="built_in">sum</span>(Y * np.log(A)+(<span class="number">1</span>-Y)*(np.log(<span class="number">1</span>-A)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 反向传播</span></span><br><span class="line">    <span class="comment">## 计算dw，db</span></span><br><span class="line">    dw = (<span class="number">1</span>/m)*np.dot(X,(A-Y).T)</span><br><span class="line">    db = (<span class="number">1</span>/m)*np.<span class="built_in">sum</span>(A-Y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span>(dw.shape == w.shape)</span><br><span class="line">    <span class="keyword">assert</span>(db.dtype == <span class="built_in">float</span>)</span><br><span class="line">    cost = np.squeeze(cost)</span><br><span class="line">    <span class="keyword">assert</span>(cost.shape == ())</span><br><span class="line">    </span><br><span class="line">    grade = &#123;</span><br><span class="line">        <span class="string">&quot;dw&quot;</span> : dw,</span><br><span class="line">        <span class="string">&quot;db&quot;</span> : db</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (grade , cost)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changew</span>(<span class="params">w , b , X , Y , times , alpha , print_cost = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    此函数通过运行梯度下降算法来优化w和b</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        w  - 权重，大小不等的数组（num_px * num_px * 3，1）</span></span><br><span class="line"><span class="string">        b  - 偏差，一个标量</span></span><br><span class="line"><span class="string">        X  - 维度为（num_px * num_px * 3，训练数据的数量）的数组。</span></span><br><span class="line"><span class="string">        Y  - 真正的“标签”矢量（如果非猫则为0，如果是猫则为1），矩阵维度为(1,训练数据的数量)</span></span><br><span class="line"><span class="string">        times  - 优化循环的迭代次数</span></span><br><span class="line"><span class="string">        alpha  - 梯度下降更新规则的学习率</span></span><br><span class="line"><span class="string">        print_cost  - 每100步打印一次损失值</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        params  - 包含权重w和偏差b的字典</span></span><br><span class="line"><span class="string">        grads  - 包含权重和偏差相对于成本函数的梯度的字典</span></span><br><span class="line"><span class="string">        成本 - 优化期间计算的所有成本列表，将用于绘制学习曲线。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    提示：</span></span><br><span class="line"><span class="string">    我们需要写下两个步骤并遍历它们：</span></span><br><span class="line"><span class="string">        1）计算当前参数的成本和梯度，使用propagate（）。</span></span><br><span class="line"><span class="string">        2）使用w和b的梯度下降法则更新参数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    costs = []</span><br><span class="line">    <span class="comment">## 开始迭代</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        grads,cost =cast_TD(w,b,X,Y)</span><br><span class="line">        dw = grads[<span class="string">&quot;dw&quot;</span>]</span><br><span class="line">        db = grads[<span class="string">&quot;db&quot;</span>]</span><br><span class="line">        w= w - alpha*dw</span><br><span class="line">        b = b - alpha*db</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            costs.append(cost)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span>(print_cost) <span class="keyword">and</span> (i%<span class="number">100</span>==<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;迭代次数：%i   ,    误差值：%f&quot;</span> % (i,cost))</span><br><span class="line">            </span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">&quot;w&quot;</span>:w,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>:b</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    grads = &#123;</span><br><span class="line">        <span class="string">&quot;dw&quot;</span>:dw,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>:db</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (p,grads,costs)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initnet</span>(<span class="params">a</span>):</span><br><span class="line">    w = np.zeros(shape = (a,<span class="number">1</span>))</span><br><span class="line">    b= <span class="number">0</span> </span><br><span class="line">    <span class="keyword">assert</span>(w.shape == (a,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(b,<span class="built_in">float</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(b,<span class="built_in">int</span>))</span><br><span class="line">    <span class="keyword">return</span> (w,b)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yuce</span>(<span class="params">w,b,X</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用学习逻辑回归参数logistic （w，b）预测标签是0还是1，</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        w  - 权重，大小不等的数组（num_px * num_px * 3，1）</span></span><br><span class="line"><span class="string">        b  - 偏差，一个标量</span></span><br><span class="line"><span class="string">        X  - 维度为（num_px * num_px * 3，训练数据的数量）的数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        Y_prediction  - 包含X中所有图片的所有预测【0 | 1】的一个numpy数组（向量）</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m = X.shape[<span class="number">1</span>]</span><br><span class="line">    Yyuce = np.zeros((<span class="number">1</span>,m)) <span class="comment">#设置一个矩阵来存放预测值</span></span><br><span class="line">    w = w.reshape(X.shape[<span class="number">0</span>],<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    A = sigmod(np.dot(w.T,X)+b)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(A.shape[<span class="number">1</span>]):</span><br><span class="line">        Yyuce[<span class="number">0</span>,i] = <span class="number">1</span> <span class="keyword">if</span> A[<span class="number">0</span>,i]&gt; <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">assert</span>(Yyuce.shape == (<span class="number">1</span>,m))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Yyuce</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logitic</span>(<span class="params">X_train,Y_train,times=<span class="number">2000</span>,alpha = <span class="number">0.1</span>,print_cost = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过调用之前实现的函数来构建逻辑回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">        X_train  - numpy的数组,维度为（num_px * num_px * 3，m_train）的训练集</span></span><br><span class="line"><span class="string">        Y_train  - numpy的数组,维度为（1，m_train）（矢量）的训练标签集</span></span><br><span class="line"><span class="string">        X_test   - numpy的数组,维度为（num_px * num_px * 3，m_test）的测试集</span></span><br><span class="line"><span class="string">        Y_test   - numpy的数组,维度为（1，m_test）的（向量）的测试标签集</span></span><br><span class="line"><span class="string">        times  - 表示用于优化参数的迭代次数的超参数</span></span><br><span class="line"><span class="string">        alpha  - 表示logitic（）更新规则中使用的学习速率的超参数</span></span><br><span class="line"><span class="string">        print_cost  - 设置为true以每100次迭代打印成本</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回：</span></span><br><span class="line"><span class="string">        res  - 包含有关模型信息的字典。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    w , b = initnet(X_train.shape[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    p,grads,costs = changew(w,b,X_train,Y_train,times,alpha,print_cost)</span><br><span class="line">    </span><br><span class="line">    w , b = p[<span class="string">&quot;w&quot;</span>],p[<span class="string">&quot;b&quot;</span>]</span><br><span class="line">    </span><br><span class="line"><span class="comment">#   预测，检查模型的可靠性</span></span><br><span class="line">    Yyuce_train = yuce(w,b,X_train)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#     打印准确性</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练集准确性：&quot;</span>,<span class="built_in">format</span>(<span class="number">100</span> - np.mean(np.<span class="built_in">abs</span>(Y_train-Yyuce_train))*<span class="number">100</span>)+<span class="string">&quot;%&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    d = &#123;</span><br><span class="line">        <span class="string">&quot;costs&quot;</span>:costs, <span class="comment"># 作图时候可以使用代价，看代价的变化</span></span><br><span class="line">        <span class="string">&quot;Yyuce_train&quot;</span>:Yyuce_train,</span><br><span class="line">        <span class="string">&quot;w&quot;</span>:w,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>:b,</span><br><span class="line">        <span class="string">&quot;alpha&quot;</span>:alpha,</span><br><span class="line">        <span class="string">&quot;times&quot;</span>:times</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><p>开始使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = logitic(train_set_x_f,train_set_y_orig,times = <span class="number">2000</span>,alpha = <span class="number">0.01</span>,print_cost=<span class="literal">True</span>)</span><br><span class="line">costs = np.squeeze(d[<span class="string">&#x27;costs&#x27;</span>])</span><br><span class="line">plt.plot(costs)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;times&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Alpha = &quot;</span>+ <span class="built_in">str</span>(d[<span class="string">&quot;alpha&quot;</span>]))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/5.png" alt=""></p><p><img src="https://macre.oss-cn-shenzhen.aliyuncs.com/Macre_Blog/post/logic/6.png" alt=""></p>]]></content>
    
    
    <summary type="html">逻辑回归对pig的分类</summary>
    
    
    
    <category term="机器学习" scheme="https://macre.cn/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://macre.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="逻辑回归" scheme="https://macre.cn/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
    <category term="爬虫" scheme="https://macre.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="pyh5" scheme="https://macre.cn/tags/pyh5/"/>
    
  </entry>
  
  <entry>
    <title>深度优先搜索算法</title>
    <link href="https://macre.cn/posts/9a82951d.html"/>
    <id>https://macre.cn/posts/9a82951d.html</id>
    <published>2023-05-25T16:00:00.000Z</published>
    <updated>2023-05-26T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="22-7-24-树和图的深度优先遍历">22.7.24 树和图的深度优先遍历</h3><h4 id="1、树和图的存储">1、树和图的存储</h4><p>​树是一种特殊的图，无环连通图，所以图和树一样的存储。图有两种，分为有向图和无向图。由于bool (a–&gt; b &amp;&amp;a&lt;-- b == a – b) = 1,所以，无向图就是一种特殊的有向图，即无向图可以存储为a–&gt; b &amp;&amp;a&lt;-- b的有向图。所以只用考虑有向图的处理与存储。<br>​有向图的两种存储方式：</p><ol><li><p>邻接矩阵</p><blockquote><p>用一个二维矩阵来存储 <code>g[a][b]</code>表示a --&gt; b的一条路</p><p>无权重为0 or 1的bool值，</p><p>有权重为权值</p><p>用的比较少，浪费空间，空间复杂度<code>O(n^2)</code>,适合稠密的图</p></blockquote></li><li><p>邻接表</p><blockquote><p>每一个节点都是一个单链表，存储这个点可以走到哪一个点</p><p>主要的存储方式</p></blockquote></li></ol><h4 id="2、树和图的遍历">2、树和图的遍历</h4><p>​有深度优先遍历（bfs）和宽度优先遍历（dfs）两种。</p><p><img src="" alt="邻接表"></p><p><strong>dfs模板</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = N*<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> h[N],e[N],en[N],idx;</span><br><span class="line"><span class="comment">//存储</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    en[idx ] =  h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>;<span class="comment">//标记一下已经走过了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = en[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add的解释看图 -- 邻接表 图上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过数组来模拟邻接表</span></span><br></pre></td></tr></table></figure><h3 id="22-7-25-dfs-深度优先搜索算法">22.7.25 dfs 深度优先搜索算法</h3><h4 id="1、什么是深搜">1、什么是深搜</h4><h4 id="2、模板-不像bfs不用队列">2、模板 不像bfs不用队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> h[N],e[N],en[N],idx; <span class="comment">//邻接表队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>;<span class="comment">//标记一下已经走过了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = en[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) <span class="built_in">dfs</span>(j); <span class="comment">// 递归往深处走</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、要点解释">3、要点解释</h4><h4 id="4、Q-A总结">4、Q&amp;A总结</h4>]]></content>
    
    
    <summary type="html">dfs算法的学习来自acwing</summary>
    
    
    
    <category term="算法" scheme="https://macre.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法 学习 广度优先 dfs" scheme="https://macre.cn/tags/%E7%AE%97%E6%B3%95-%E5%AD%A6%E4%B9%A0-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88-dfs/"/>
    
  </entry>
  
  <entry>
    <title>yolov5 macre</title>
    <link href="https://macre.cn/posts/56ab7aeb.html"/>
    <id>https://macre.cn/posts/56ab7aeb.html</id>
    <published>2023-04-04T18:15:53.000Z</published>
    <updated>2025-02-20T18:17:24.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="yolov5-（Macre）">yolov5 （Macre）</h2><p>目录</p><h4 id="文章目录">文章目录</h4><ul><li><a href="#yolov5_Macre_0">yolov5 （Macre）</a></li><li><ul><li><a href="#yolov5_29">一、yolov5介绍</a></li><li><ul><li><a href="#1__31">1 四种网络模型</a></li><li><a href="#2_yolov5__35">2 yolov5 输入结构</a></li><li><ul><li><a href="#21_Mosaic_49">2.1 **Mosaic数据增强**</a></li><li><a href="#22__63">2.2 **自适应锚框计算**</a></li><li><a href="#23__83">2.3 **自适应图片缩放**</a></li></ul></li><li><a href="#3__Backbone__87">3 Backbone 主干网</a></li><li><ul><li><a href="#31_Focus_89">3.1 **Focus结构**</a></li><li><a href="#32_CSP_102">3.2 **CSP结构**</a></li></ul></li><li><a href="#4_Neck_106">4 Neck</a></li><li><a href="#5__112">5 输出端</a></li><li><ul><li><a href="#51_Bounding_box_114">5.1 **Bounding box损失函数**</a></li><li><a href="#52_nms_116">5.2 **nms非极大值抑制**</a></li></ul></li></ul></li><li><a href="#_124">二、环境搭建</a></li><li><ul><li><a href="#1anaconda_136">1、anaconda</a></li><li><ul><li><a href="#11__138">1.1 下载</a></li><li><a href="#12__154">1.2 安装</a></li><li><a href="#13_Anaconda_Navigator__244">1.3 Anaconda Navigator 尝试</a></li></ul></li><li><a href="#2Anaconda_Promp_272">2、利用Anaconda Promp创建新环境</a></li><li><ul><li><a href="#21__296">2.1 创建新的环境</a></li><li><a href="#22__328">2.2 激活新的环境</a></li></ul></li><li><a href="#3yolov5__343">3、yolov5 框架部署</a></li><li><ul><li><a href="#31_gitgub_347">3.1 克隆gitgub上的项目</a></li><li><a href="#32__369">3.2 文件结构说明</a></li><li><a href="#33__399">3.3 检测配置是否成功</a></li></ul></li><li><a href="#4_yolopytorch_gpu_466">4 为yolo环境配置pytorch gpu版本</a></li><li><a href="#5_gpuCUDA_554">5 配置gpu的CUDA</a></li><li><ul><li><a href="#51__574">5.1 查看正确的版本</a></li><li><a href="#52__591">5.2 下载和安装</a></li><li><a href="#_625">测试环境是否安装成功</a></li><li><a href="#cuDNN_638">cuDNN配置</a></li></ul></li></ul></li><li><a href="#_677">三、制作数据集</a></li><li><ul><li><a href="#31_679">3.1获取视频和视频转图片</a></li><li><a href="#32_labelimgyolotxt_681">3.2 使用labelimg来制作yolotxt数据</a></li><li><ul><li><a href="#321_labelimg__683">3.2.1 labelimg 介绍</a></li><li><a href="#322__693">3.2.2 下载</a></li><li><a href="#323__703">3.2.3 标注</a></li><li><a href="#324_yolotxt_817">3.2.4 yolo产生的txt数据</a></li><li><a href="#325_vocxml_823">3.2.5 voc数据产生的xml</a></li><li><a href="#326__829">3.2.6 数据之间的转换</a></li><li><a href="#327__837">3.2.7 数据集文件夹结构</a></li><li><a href="#328__862">3.2.8 训练集和测试集制作</a></li></ul></li></ul></li><li><a href="#_936">四、配置模型</a></li><li><ul><li><a href="#41__938">4.1 修改数据配置文件</a></li></ul></li><li><a href="#__981">五、开始训练 模型的使用</a></li><li><a href="#__1058">六 、检测效果</a></li><li><ul><li><a href="#61__1060">6.1 训练可视化</a></li><li><a href="#62__1080">6.2 检测效果</a></li></ul></li></ul></li></ul><p>**笔记思路和结构 **</p><ul><li><p>以项目部署的思路来写的</p><blockquote><p>一、配置anaconda</p><p>二、环境配置</p><p>三、制作数据集合</p></blockquote></li></ul><p>效果展示</p><p>yolov5 原神测试</p><h3 id="一、yolov5介绍">一、yolov5介绍</h3><h4 id="1-四种网络模型">1 四种网络模型</h4><p>Yolov5官方代码中，给出的目标检测网络中一共有4个版本，按大小来分，分别是Yolov5s、Yolov5m、Yolov5l、Yolov5x四个模型。只需要记住越大的效果越好，但是花费的时间就越多。</p><h4 id="2-yolov5-输入结构">2 yolov5 输入结构</h4><p><img src="https://api.smain.cn/pics/pic_fd22f6e5.png" alt="pic_fd22f6e5.png"></p><p>Yolov5的网络结构图，可以看出，还是分为输入端、Backbone、Neck、Prediction四个部分。</p><p>**（1）输入端：**Mosaic数据增强、自适应锚框计算、自适应图片缩放<br>**（2）Backbone：**Focus结构，CSP结构<br>**（3）Neck：**FPN+PAN结构<br>**（4）Prediction：**GIOU_Loss</p><h5 id="2-1-Mosaic数据增强">2.1 Mosaic数据增强</h5><p>为什么要进行Mosaic数据增强？<br>在平时项目训练时，小目标的AP一般比中目标和大目标低很多。而Coco数据集中也包含大量的小目标，但比较麻烦的是小目标的分布并不均匀。</p><p>主要有几个优点：</p><ol><li>丰富数据集：随机使用4张图片，随机缩放，再随机分布进行拼接，大大丰富了检测数据集，特别是随机缩放增加了很多小目标，让网络的鲁棒性更好。</li><li>**减少GPU：**可能会有人说，随机缩放，普通的数据增强也可以做，但作者考虑到很多人可能只有一个GPU，因此Mosaic增强训练时，可以直接计算4张图片的数据，使得Mini-batch大小并不需要很大，一个GPU就可以达到比较好的效果。</li></ol><p>此外，发现另一研究者的训练方式也值得借鉴，采用的数据增强和Mosaic比较类似，也是使用4张图片（不是随机分布），但训练计算loss时，采用“缺啥补啥”的思路：</p><p>如果上一个iteration中，小物体产生的loss不足（比如小于某一个阈值），则下一个iteration就用拼接图；否则就用正常图片训练，也很有意思。</p><h5 id="2-2-自适应锚框计算">2.2 自适应锚框计算</h5><p>在Yolo算法中，针对不同的数据集，都会有初始设定长宽的锚框。</p><p>在网络训练中，网络在初始锚框的基础上输出预测框，进而和真实框groundtruth进行比对，计算两者差距，再反向更新，迭代网络参数。</p><p>因此初始锚框也是比较重要的一部分。</p><p>在Yolov3、Yolov4中，训练不同的数据集时，计算初始锚框的值是通过单独的程序运行的。</p><p>但Yolov5中将此功能嵌入到代码中，每次训练时，自适应的计算不同训练集中的最佳锚框值。</p><p>当然，如果觉得计算的锚框效果不是很好，也可以在代码中将自动计算锚框功能关闭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add arqument(<span class="string">&#x27;--noautu=oanchor&#x27;</span>,aaction=<span class="string">&#x27;store ture&#x27;</span>,<span class="built_in">help</span> = <span class="string">&#x27;disable autoanchor check&#x27;</span>)</span><br></pre></td></tr></table></figure><p>控制的代码即train.py中上面一行代码，设置成False，每次训练时，不会自动计算。</p><h5 id="2-3-自适应图片缩放">2.3 自适应图片缩放</h5><p>在常用的目标检测算法中，不同的图片长宽都不相同，因此常用的方式是将原始图片统一缩放到一个标准尺寸，再送入检测网络中。</p><h4 id="3-Backbone-主干网">3 Backbone 主干网</h4><h5 id="3-1-Focus结构">3.1 Focus结构</h5><p><img src="https://api.smain.cn/pics/pic_700d6a1e.png" alt="pic_700d6a1e.png"></p><p>Focus结构，在Yolov3&amp;Yolov4中并没有这个结构，其中比较关键是切片操作。</p><p>比如右图的切片示意图，443的图像切片后变成2212的特征图。</p><p>以Yolov5s的结构为例，原始6086083的图像输入Focus结构，采用切片操作，先变成30430412的特征图，再经过一次32个卷积核的卷积操作，最终变成30430432的特征图。</p><p>需要注意的是：Yolov5s的Focus结构最后使用了32个卷积核，而其他三种结构，使用的数量有所增加，先注意下，后面会讲解到四种结构的不同点。</p><h5 id="3-2-CSP结构">3.2 CSP结构</h5><p>而Yolov5中设计了两种CSP结构，以Yolov5s网络为例，CSP1_X结构应用于Backbone主干网络，另一种CSP2_X结构则应用于Neck中。</p><h4 id="4-Neck">4 Neck</h4><p>Yolov5现在的Neck和Yolov4中一样，都采用FPN+PAN的结构，但在Yolov5刚出来时，只使用了FPN结构，后面才增加了PAN结构，此外网络中其他部分也进行了调整。</p><p>Yolov5的Neck结构中，采用借鉴CSPnet设计的CSP2结构，加强网络特征融合的能力。</p><h4 id="5-输出端">5 输出端</h4><h5 id="5-1-Bounding-box损失函数">5.1 Bounding box损失函数</h5><h5 id="5-2-nms非极大值抑制">5.2 nms非极大值抑制</h5><h3 id="二、环境搭建">二、环境搭建</h3><p>技术流程是</p><p>1、使用anaconda配置一个yolov5的专属环境，</p><p>2、在环境里基于pytroch利用yolov5框架进行目标检测。</p><p>3、数据利用python脚本把视频分割为图片，图片利用labelimg来制作yolov5所需要的txt文件。</p><h4 id="1、anaconda">1、anaconda</h4><h5 id="1-1-下载">1.1 下载</h5><p>链接：<a href="https://www.anaconda.com/products/individual">Anaconda | Individual Edition</a></p><p><a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Index of /anaconda/archive/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p>选择最新的就行</p><h5 id="1-2-安装">1.2 安装</h5><p>我的卸载了，再走一遍，应该不会有什么问题。安装包我会放在群里。</p><p><img src="https://api.smain.cn/pics/pic_562e2b84.png" alt="pic_562e2b84.png"></p><p>点击next</p><p><img src="https://api.smain.cn/pics/pic_d27f0876.png" alt="pic_d27f0876.png"></p><p>i agree</p><p><img src="https://api.smain.cn/pics/pic_a5b1e1ea.png" alt="pic_a5b1e1ea.png"></p><p>只有我使用</p><p><img src="https://api.smain.cn/pics/pic_fb6e01bf.png" alt="pic_fb6e01bf.png"></p><p>选择合适的路径</p><p><img src="https://api.smain.cn/pics/pic_9b846087.png" alt="pic_9b846087.png"></p><p>第一个选项：</p><blockquote><p>选择是否将 Anaconda 添加到 PATH 环境变量中，默认是不添加的。不添加意味着你不能在cmd(命令提示符)以及powershell中使用命令行操作。我不建议你添加，是因为anaconda有自带的 Anaconda Prompt 以及 Anaconda Powershell Prompt，这与cmd和powershell是一样的，没有必要添加到路径。当然如果你有其他想法，你可以选择添加。</p></blockquote><p>第二个选项：</p><blockquote><p>选择是否将 Anaconda 注册为你的默认 Python，默认是选择的。（我这个默认为python为3.8的）如果你要安装和运行 Anaconda 的多个版本或 Python 的多个版本，基本上是不勾选此选项的 。如果你有其它想法，另说。如果你之前安装过python并且使用vs、pycharm等软件时，勾选此选项，anaconda自带的python会成为这些软件的默认选项。</p><p>如果没有配置过之前的python那就勾选第二个</p></blockquote><p>安装即可</p><p><img src="https://api.smain.cn/pics/pic_39e54782.png" alt="pic_39e54782.png"></p><p>等待安装成功后，再菜单里找到最近添加，右键打开文件位置。</p><p><img src="https://api.smain.cn/pics/pic_b4475c4b.png" alt="pic_b4475c4b.png"></p><p>发送桌面快捷方式，打开后有几个文件：</p><p><img src="https://api.smain.cn/pics/pic_eb258a90.png" alt="pic_eb258a90.png"></p><p>Anaconda Navigator：</p><blockquote><p>Anaconda Navigator的官方介绍：Anaconda Navigator是Anaconda发行版中包含的桌面图形用户界面（GUI），可让您启动应用程序并轻松管理conda程序包，环境和通道，而无需使用命令行命令。</p></blockquote><p>Anaconda Powershell Prompt 以及 Anaconda Prompt：</p><blockquote><p>与上面一致，但是是使用命令行模式</p></blockquote><p>Jupyter Notebook：这个使用的人非常多</p><blockquote><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。简而言之，Jupyter Notebook是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。</p></blockquote><p>Spyder：</p><blockquote><p>百度百科：Spyder是Python的作者为它开发的一个简单的集成开发环境。和其他的Python开发环境相比，它最大的优点就是模仿MATLAB的“工作空间”的功能，可以很方便地观察和修改数组的值。</p></blockquote><p>验证安装是否成功。</p><p>打开Anaconda Promp，输入 conda info</p><p><img src="https://api.smain.cn/pics/pic_0c854db6.png" alt="pic_0c854db6.png"></p><p>成功</p><h5 id="1-3-Anaconda-Navigator-尝试">1.3 Anaconda Navigator 尝试</h5><p><img src="https://api.smain.cn/pics/pic_3a94eb88.png" alt="pic_3a94eb88.png"></p><p>打开后是这样。重要的是environments和applications on 。</p><p>environments：</p><p><img src="https://api.smain.cn/pics/pic_32d4eaf8.png" alt="pic_32d4eaf8.png"></p><p>是一个你的环境，左边是你的环境名称，右边是你的环境里的包名称。目的是针对你的不同应用场景来管理不同的包，是你的开发环境更便捷不被你的混乱的包搞混乱。和pycharm的venv是一样的。例如你的web工程为一个环境，人工智能为一个环境，数据可视化一个环境。</p><p><img src="https://api.smain.cn/pics/pic_43ded5bd.png" alt="pic_43ded5bd.png"></p><p>create是创建新的环境。</p><h4 id="2、利用Anaconda-Promp创建新环境">2、利用Anaconda Promp创建新环境</h4><blockquote><p>通常一个环境就足够了，但是我还是建议再创建一个新的环境。<br>在有些情况下，你可以在新环境上做实验，没问题后再在默认环境中操作，新环境中遭遇不可控错误，那就删除重建一个。或者你要搭建 tesorflow 、pytorch深度学习环境，那你肯定要新建环境的。</p></blockquote><p>图形化创建环境：</p><p><img src="https://api.smain.cn/pics/pic_38d2914b.png" alt="pic_38d2914b.png"></p><p>默认的环境是base（root）</p><p>检查是否安装成功：<code>conda --version</code></p><p>检查目前的安装环境：<code>conda info --envs</code> 或者 <code>conda info -e</code></p><p><img src="https://api.smain.cn/pics/pic_0c93ba74.png" alt="pic_0c93ba74.png"></p><h5 id="2-1-创建新的环境">2.1 创建新的环境</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name object_detaction tensorflow python=<span class="number">3.9</span> 中途需要输入 y 表示同意继续</span><br></pre></td></tr></table></figure><blockquote><p>–name 或者 -n ：指定环境名</p><p>tensorflow：环境名python=3.9：指定安装python的版本，python=3.9表示安装3.9中的最新版也可以指定具体的版本 比如：python=3.9.4</p></blockquote><p>旧的解析器创建</p><p><img src="https://api.smain.cn/pics/pic_5a882a78.png" alt="pic_5a882a78.png"></p><p>新的环境创建成功</p><p>推荐使用：</p><p>新的解析器创建</p><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n &lt;环境名&gt; tensorflow python=<span class="number">3.9</span> -y</span><br></pre></td></tr></table></figure><p>命令来创建。</p><h5 id="2-2-激活新的环境">2.2 激活新的环境</h5><p>conda activate 环境名来激活环境</p><p><img src="https://api.smain.cn/pics/pic_c838b9d7.png" alt="pic_c838b9d7.png"></p><p>激活成功</p><blockquote><p>这个环境就是来做开放环境目标检测的了。这是使用yolo框架的，其实你也可以之间用pytorch或者tf来命名，来确定使用的基础是pytorch还是tf。</p></blockquote><h4 id="3、yolov5-框架部署">3、yolov5 框架部署</h4><p>看此文章之前先看四配置pytorch。</p><h5 id="3-1-克隆gitgub上的项目">3.1 克隆gitgub上的项目</h5><p><a href="#yolov5_29">YOLOv5</a>的代码是开源的，因此我们可以从github上克隆其源码。不得不说GitHub的确是全球最大的男性交友网站，里面的人个个都是人才，yolov5发布才一年左右的时间，YOLOv5就已经更新了5个分支了，分别是yolov5.1-yolov5.5分支。</p><p>首先打开yolov5的<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>的<a href="https://github.com/ultralytics/yolov5/tree/v5.0">官网</a> <a href="https://github.com/ultralytics/yolov5/tree/v5.0%EF%BC%88%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%9C%A8%E5%9B%BD%E5%A4%96%E6%89%93%E5%BC%80%E6%98%AF%E5%BE%88%E6%85%A2%E7%9A%84%EF%BC%8C%E8%80%8C%E4%B8%94%E6%98%AF%E6%9C%89%E7%9A%84%E6%97%B6%E5%80%99%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%89%93%E5%BC%80%EF%BC%8C%E6%9C%89%E7%9A%84%E6%97%B6%E5%80%99%E6%98%AF%E8%BF%9B%E4%B8%8D%E5%8E%BB%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E5%A4%A7%E5%AE%B6%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E4%B8%8D%E5%BC%80%E7%9A%84%E8%AF%9D%EF%BC%8C%E4%B8%80%E5%AE%9A%E8%A6%81%E5%A4%9A%E6%89%93%E5%BC%80%E5%87%A0%E6%AC%A1%E3%80%82%EF%BC%89%E6%89%93%E5%BC%80%E7%9A%84%E5%AE%98%E7%BD%91%E7%95%8C%E9%9D%A2%E5%A6%82%E4%B8%8B%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%B0%B1%E6%98%AF%E5%A4%A7%E7%A5%9Eglenn-jocher%E5%BC%80%E6%BA%90%E7%9A%84yolov5%E7%9A%84%E9%A1%B9%E7%9B%AE%E3%80%82">https://github.com/ultralytics/yolov5/tree/v5.0（这个网站在国外打开是很慢的，而且是有的时候能正常打开，有的时候是进不去的，但是大家第一次打不开的话，一定要多打开几次。）打开的官网界面如下，这个就是大神glenn-jocher开源的yolov5的项目。</a></p><p><img src="https://api.smain.cn/pics/pic_f899139a.png" alt="pic_f899139a.png"></p><p>使用git来部署，或者下载zip都是可以的。我使用的是git来部署。</p><p><img src="https://api.smain.cn/pics/pic_7d95ee06.png" alt="pic_7d95ee06.png"></p><p>部署成功</p><h5 id="3-2-文件结构说明">3.2 文件结构说明</h5><p>现在来对代码的整体目录做一个介绍：</p><p>├── data：主要是存放一些超参数的配置文件（这些文件（yaml文件）是用来配置训练集和测试集还有验证集的路径的，其中还包括目标检测的种类数和种类的名称）；还有一些官方提供测试的图片。如果是训练自己的数据集的话，那么就需要修改其中的yaml文件。但是自己的数据集不建议放在这个路径下面，而是建议把数据集放到yolov5项目的同级目录下面。</p><p>├── models：里面主要是一些网络构建的配置文件和函数，其中包含了该项目的四个不同的版本，分别为是s、m、l、x。从名字就可以看出，这几个版本的大小。他们的检测测度分别都是从快到慢，但是精确度分别是从低到高。这就是所谓的鱼和熊掌不可兼得。如果训练自己的数据集的话，就需要修改这里面相对应的yaml文件来训练自己模型。</p><p>├── utils：存放的是工具类的函数，里面有loss函数，metrics函数，plots函数等等。</p><p>├── <a href="http://detect.py">detect.py</a>：利用训练好的权重参数进行目标检测，可以进行图像、视频和摄像头的检测。</p><p>├── <a href="http://train.py">train.py</a>：训练自己的数据集的函数。</p><p>├── <a href="http://test.py">test.py</a>：测试训练的结果的函数。</p><p>├──requirements.txt：这是一个文本文件，里面写着使用yolov5项目的环境依赖包的一些版本，可以利用该文本导入相应版本的包。</p><p>以上就是yolov5项目代码的整体介绍。我们训练和测试自己的数据集基本就是利用到如上的代码。</p><h5 id="3-3-检测配置是否成功">3.3 检测配置是否成功</h5><p>首先切换到yolo5的位置</p><p><img src="https://api.smain.cn/pics/pic_4b21cea1.png" alt="pic_4b21cea1.png"></p><p>(1)配置requirements.txt里的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i &lt;源地址&gt;</span><br></pre></td></tr></table></figure><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></p><p>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>常见的源地址，避免下载包出问题。</p><p>下载完yolov5后，什么都不用改，<a href="http://xn--detect-2w2r549b.py">运行detect.py</a></p><p>这个是帮你检测能不能正常运行的</p><p>(2)检测是否成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py</span><br></pre></td></tr></table></figure><p>运行一下试试</p><p><img src="https://api.smain.cn/pics/pic_edf04e44.png" alt="pic_edf04e44.png"></p><p>在runs里的detect文件里找到exp如果有下面的图片就是成功：</p><p><img src="https://api.smain.cn/pics/pic_4e87edf4.png" alt="pic_4e87edf4.png"></p><p><img src="https://api.smain.cn/pics/pic_d7b4ac78.png" alt="pic_d7b4ac78.png"></p><h4 id="4-为yolo环境配置pytorch-gpu版本">4 为yolo环境配置pytorch gpu版本</h4><p>cpu太慢了，因为不是gpu版本是不可以使用gpu来就行训练的。</p><p>打开pytorch的<a href="https://pytorch.org/">官网</a>， <a href="https://pytorch.org/">https://pytorch.org/</a></p><p>根据你的版本选择合适的下载：</p><p><img src="https://api.smain.cn/pics/pic_a57d36cd.png" alt="pic_a57d36cd.png"></p><p>使用conda来配置在环境里：</p><p>执行run this commond这个命令</p><p><img src="https://api.smain.cn/pics/pic_51f69425.png" alt="pic_51f69425.png"></p><p>出现后要输入Y。</p><p>如果下载太慢了，可以换源：</p><p>使用清华镜像源网站<br>切换到国内的镜像源（为什么要切换原因就不用多说了吧（手动狗头））<br>分别输入以下4行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorc</span><br></pre></td></tr></table></figure><p>注意！如果切换镜像后当出现下载不了的情况，就先切换默认源，然后再修改另一个可以使用的conda源（一定要先恢复默认，再换另一个！！！）<br>切回默认源：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure><p>如果是cpu版本：</p><p>进入python查看当前pytorch是否可用<a href="https://so.csdn.net/so/search?q=gpu&amp;spm=1001.2101.3001.7020">gpu</a>，发现是false</p><blockquote><blockquote><blockquote><blockquote><p>import torch<br>torch.cuda.is_available()<br>False</p></blockquote></blockquote></blockquote></blockquote><p>如果在环境里输入python回车后是这个，说明不能使用gpu来运行。</p><p>查看torch版本，发现是cpu，可能是安装的时候没有留意</p><blockquote><blockquote><blockquote><blockquote><p>torch.version<br>‘1.10.2+cpu’</p></blockquote></blockquote></blockquote></blockquote><p>conda remove --name Python3.9.4 --all</p><p>各种检测命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())<span class="comment">#cuda是否可用</span></span><br><span class="line">torch.cuda.device_count()<span class="comment">#返回GPU的数量</span></span><br><span class="line">torch.cuda.get_device_name(<span class="number">0</span>)<span class="comment">#返回gpu名字，设备索引默认从0开始</span></span><br></pre></td></tr></table></figure><h4 id="5-配置gpu的CUDA">5 配置gpu的CUDA</h4><p>我参考了网上许多教程，结合自己的实际情况写的笔记。</p><p>安装CUDA需要下载两个安装包</p><p>windows10 版本安装 CUDA ，首先需要下载两个安装包</p><ul><li>CUDA toolkit（toolkit就是指工具包）</li><li>cuDNN</li></ul><p>注：cuDNN 是用于配置深度学习使用</p><p>官方教程<br>CUDA：<a href="https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html">https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html</a></p><p>cuDNN：<a href="https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installwindows">https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installwindows</a></p><h5 id="5-1-查看正确的版本">5.1 查看正确的版本</h5><p>打开显卡驱动的系统信息界面：</p><p><img src="https://api.smain.cn/pics/pic_59d439c0.png" alt="pic_59d439c0.png"></p><p>查看版本得知是512.36</p><p><img src="https://api.smain.cn/pics/pic_819ec51a.png" alt="pic_819ec51a.png"></p><p>支持的是11.6</p><p>cuda toolkit与driver对应表：<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p><h5 id="5-2-下载和安装">5.2 下载和安装</h5><p><img src="https://api.smain.cn/pics/pic_1696188c.png" alt="pic_1696188c.png"></p><p>选择正确的版本和选择exe local 来安装。</p><p>选择自定义安装。</p><p><img src="https://api.smain.cn/pics/pic_6bf66e45.png" alt="pic_6bf66e45.png"></p><p>不要选Visual Studio Integration，即使选了也不能成功安装</p><p><img src="https://api.smain.cn/pics/pic_8422cd08.png" alt="pic_8422cd08.png"></p><p>一直安装下去就行</p><p>完成后需要就行查看系统变量中是否添加了路径，如果没有需要自己添加</p><p><img src="https://api.smain.cn/pics/pic_dce61931.png" alt="pic_dce61931.png"></p><h5 id="测试环境是否安装成功">测试环境是否安装成功</h5><p>运行cmd，输入nvcc --version 即可查看版本号；<br>set cuda，可以查看 CUDA 设置的环境变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvcc --version</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cuda</span><br></pre></td></tr></table></figure><h5 id="cuDNN配置">cuDNN配置</h5><p>cuDNN地址如下，不过要注意的是，我们需要注册一个账号，才可以进入到下载界面。大家可以放心注册的。</p><p><a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>cuDNN叫配置更为准确，我们先把下载的 cuDNN 解压缩，会得到下面的文件：</p><p>cuDNN 解压缩后的文件</p><p><img src="https://api.smain.cn/pics/pic_b250913a.png" alt="pic_b250913a.png"></p><p>下载后发现其实cudnn不是一个exe文件，而是一个压缩包，解压后，有三个文件夹，把三个文件夹拷贝到cuda的安装目录下。</p><p>拷贝时看到，CUDA 的安装目录中，有和 cuDNN 解压缩后的同名文件夹，这里注意，不需要担心，直接复制即可。cuDNN 解压缩后的同名文件夹中的配置文件会添加到 CUDA安装目录中的同名文件夹中。</p><p>现在大家应该可以理解，cuDNN 其实就是 CUDA 的一个补丁而已，专为深度学习运算进行优化的。然后再参加环境变量</p><p>往系统环境变量中的 path 添加如下路径（根据自己的路径进行修改）</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\bin</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\include</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\lib</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\libnvvp</p><p>到此环境搭建成功！！！！</p><h3 id="三、制作数据集">三、制作数据集</h3><h4 id="3-1获取视频和视频转图片">3.1获取视频和视频转图片</h4><h4 id="3-2-使用labelimg来制作yolotxt数据">3.2 使用labelimg来制作yolotxt数据</h4><h5 id="3-2-1-labelimg-介绍">3.2.1 labelimg 介绍</h5><p>Labelimg是一款开源的数据标注工具，可以标注三种格式。</p><p>1 VOC标签格式，保存为<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020">xml</a>文件。</p><p>2 yolo标签格式，保存为txt文件。</p><p>3 createML标签格式，保存为json格式。</p><h5 id="3-2-2-下载">3.2.2 下载</h5><p>在conda的命令窗口下运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install labelimg -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>运行如上命令后，系统就会自动下载labelimg相关的依赖。由于这是一个很轻量的工具，所以下载起来很快，当出现如下红色框框中的告诉我们成功安装的时候，说明labelimg安装成功了。</p><h5 id="3-2-3-标注">3.2.3 标注</h5><p>（1）打开labelimg</p><p>在打开labelimg之前要使用文件的配置，如下</p><p>资料数据目录结构：</p><blockquote><p>&lt;数据名字&gt;</p><ul><li>label --&gt; 标签文件夹</li><li>images --&gt; 图片文件夹</li><li>predefined_classes.txt --&gt; 初始化labelimg的分类文件</li></ul></blockquote><p>（1）label文件是保存标签的数据</p><p>（2）images文件是用来保存图片的数据。</p><blockquote><p>images 数据来源可以自己搜集。</p><p>可以使用下面的python脚本把视频改为png</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视频转图片的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#此删除文件夹内容的函数来源于网上</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">del_file</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除某一目录下的所有文件或文件夹</span></span><br><span class="line"><span class="string">    :param filepath: 路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    del_list = os.listdir(filepath)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> del_list:</span><br><span class="line">        file_path = os.path.join(filepath, f)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            os.remove(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video_to_images</span>(<span class="params">fps,path</span>):</span><br><span class="line">  cv = cv2.VideoCapture(path)</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">not</span> cv.isOpened()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n打开视频失败！请检查视频路径是否正确\n&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;images/&quot;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&quot;images/&quot;</span>) <span class="comment"># 创建文件夹</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    del_file(<span class="string">&#x27;images/&#x27;</span>) <span class="comment"># 清空文件夹</span></span><br><span class="line">  order = <span class="number">0</span>   <span class="comment">#序号</span></span><br><span class="line">  h = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    h=h+<span class="number">1</span></span><br><span class="line">    rval, frame = cv.read()</span><br><span class="line">    <span class="keyword">if</span> h == fps:</span><br><span class="line">      h = <span class="number">0</span></span><br><span class="line">      order = order + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> rval:</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;./images/&#x27;</span> + <span class="built_in">str</span>(order) + <span class="string">&#x27;.jpg&#x27;</span>, frame) <span class="comment">#图片保存位置以及命名方式</span></span><br><span class="line">        cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">  cv.release()</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;\nsave success!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数设置</span></span><br><span class="line">fps = <span class="number">12</span>   <span class="comment"># 隔多少帧取一张图  1表示全部取</span></span><br><span class="line">path=<span class="string">&quot;F:\\obsluzhi\\cs1.mp4&quot;</span> <span class="comment"># 视频路径 比如 D:\\images\\tram_result.mp4 或者 D:/images/tram_result.mp4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  video_to_images(fps,path)</span><br><span class="line">  <span class="comment"># 会在代码的当前文件夹下 生成images文件夹 用于保存图片</span></span><br><span class="line">  <span class="comment"># 如果有images文件夹，会清空文件夹！</span></span><br></pre></td></tr></table></figure><p>（3）predefined_classes.txt</p><p>内容是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">person</span><br><span class="line">hutao</span><br><span class="line">humo</span><br><span class="line">hua</span><br><span class="line">ludeng</span><br><span class="line">shu</span><br><span class="line">caocong</span><br><span class="line">pugongying</span><br><span class="line">maodian</span><br><span class="line">...类别</span><br></pre></td></tr></table></figure><p>（2）界面认识</p><p>到数据集的目录下执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelimg images predefined_classes.txt</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-oNZfbkSl-1671794265512)(C:\Users\20998\AppData\Roaming\Typora\typora-user-images\1663854191888.png)]<img src="https://api.smain.cn/pics/pic_1feb8da1.png" alt="pic_1feb8da1.png"></p><p>上图是界面，open是打开，opendir是打开文件夹，他会把文件夹的所有图片导入，如何按下快捷键D可以快速浏览下一个图片。yolo 是导出的是txt文件，还可以导出voc 的xml文件。create rectbox可以创建窗口。</p><p>（3）标签一次演示</p><h5 id="3-2-4-yolo产生的txt数据">3.2.4 yolo产生的txt数据</h5><p>（1）格式解释</p><p>（2）用处</p><h5 id="3-2-5-voc数据产生的xml">3.2.5 voc数据产生的xml</h5><p>（1）格式解释</p><p>（2）用处</p><h5 id="3-2-6-数据之间的转换">3.2.6 数据之间的转换</h5><p>（1）xml转txt</p><p>（2）json 转txt</p><h5 id="3-2-7-数据集文件夹结构">3.2.7 数据集文件夹结构</h5><p>（1）标准的数据文件格式：</p><p>这里暂时不用，之后会对标准的数据格式进行一个解析。</p><p>（2）看懂项目的文件结构后，也可以随意的保存数据文件</p><p>推荐使用</p><blockquote><p>yolov5</p><blockquote><p>&lt;数据集名字&gt;</p><blockquote><ul><li>label --&gt; 标签文件夹</li><li>images --&gt; 图片文件夹</li><li>predefined_classes.txt --&gt; 初始化labelimg的分类文件</li><li>imagesets</li></ul><blockquote><ul><li>main</li></ul><blockquote><ul><li>训练集和测试集合</li></ul></blockquote></blockquote></blockquote></blockquote></blockquote><h5 id="3-2-8-训练集和测试集制作">3.2.8 训练集和测试集制作</h5><p>训练集和测试集制作的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#xml文件的地址，根据自己的数据进行修改 xml一般存放在Annotations下</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--xml_path&#x27;</span>, default=<span class="string">&#x27;Annotations&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;input xml label path&#x27;</span>)</span><br><span class="line"><span class="comment">#数据集的划分，地址选择自己数据下的ImageSets/Main</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;--txt_path&#x27;</span>, default=<span class="string">&#x27;ImageSets/Main&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;output txt label path&#x27;</span>)</span><br><span class="line">opt = parser.parse_args()</span><br><span class="line"></span><br><span class="line">trainval_percent = <span class="number">1.0</span>  <span class="comment"># 训练集和验证集所占比例。 这里没有划分测试集</span></span><br><span class="line">train_percent = <span class="number">0.9</span>     <span class="comment"># 训练集所占比例，可自己进行调整</span></span><br><span class="line">xmlfilepath = opt.xml_path</span><br><span class="line">txtsavepath = opt.txt_path</span><br><span class="line">total_xml = os.listdir(xmlfilepath)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(txtsavepath):</span><br><span class="line">    os.makedirs(txtsavepath)</span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(total_xml)</span><br><span class="line">list_index = <span class="built_in">range</span>(num)</span><br><span class="line">tv = <span class="built_in">int</span>(num * trainval_percent)</span><br><span class="line">tr = <span class="built_in">int</span>(tv * train_percent)</span><br><span class="line">trainval = random.sample(list_index, tv)</span><br><span class="line">train = random.sample(trainval, tr)</span><br><span class="line"></span><br><span class="line">file_trainval = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/trainval.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_test = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_train = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/train.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">file_val = <span class="built_in">open</span>(txtsavepath + <span class="string">&#x27;/val.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_index:</span><br><span class="line">    name = total_xml[i][:-<span class="number">4</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> trainval:</span><br><span class="line">        file_trainval.write(name)</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> train:</span><br><span class="line">            file_train.write(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_val.write(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_test.write(name)</span><br><span class="line"></span><br><span class="line">file_trainval.close()</span><br><span class="line">file_train.close()</span><br><span class="line">file_val.close()</span><br><span class="line">file_test.close()</span><br></pre></td></tr></table></figure><p>会产生一个ImageSets里面有一个Main，main文件夹里有四个文件，分别用来训练和测试的。</p><p>（3）利用pt模型</p><p>在yolov5文件夹新建一个weights文件夹，将yolov5s.pt复制一个放进去。</p><p>到这里数据集就制作完成了。</p><h3 id="四、配置模型">四、配置模型</h3><h4 id="4-1-修改数据配置文件">4.1 修改数据配置文件</h4><p>（1）选择适当的模型</p><p>选择一个模型，在yolov5目录下的model文件夹下是模型的配置文件，有n、s、m、l、x版本，逐渐增大（随着架构的增大，训练时间也是逐渐增大）。</p><p>这里选用 yolov5s.yaml</p><p>打开yolov5/models里面选择yolov5s.yaml</p><p>修改参数</p><p><img src="https://api.smain.cn/pics/pic_1e12c173.png" alt="pic_1e12c173.png"></p><p>(2)yolov5/data文件夹里配置mydata.yaml</p><p>创建一个txt，根据具体情况来创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">train: D:/Yolov5/yolov5/VOCData/dataSet_path/train.txt <span class="comment">#训练文件地址</span></span><br><span class="line">val: D:/Yolov5/yolov5/VOCData/dataSet_path/val.txt <span class="comment">#测试文件地址</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># number of classes 类别个数</span></span><br><span class="line">nc: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class names 类别名字</span></span><br><span class="line">names: [<span class="string">&quot;light&quot;</span>, <span class="string">&quot;post&quot;</span>]</span><br></pre></td></tr></table></figure><p>配置文件成功！</p><h3 id="五、开始训练-模型的使用">五、开始训练 模型的使用</h3><p>打开yolov5 目录下的 <a href="http://train.py">train.py</a> 程序，我们可以多看看这些参数使用。</p><p>常用参数解释如下：</p><p>weights：权重文件路径</p><p>cfg：存储模型结构的配置文件</p><p>data：存储训练、测试数据的文件</p><p>epochs：指的就是训练过程中整个数据集将被迭代（训练）了多少次，显卡不行你就调小点。</p><p>batch-size：训练完多少张图片才进行权重更新，显卡不行就调小点。</p><p>img-size：输入图片宽高，显卡不行就调小点。</p><p>device：cuda device, i.e. 0 or 0,1,2,3 or cpu。选择使用GPU还是CPU</p><p>workers：线程数。默认是8。</p><p>其他：</p><p>noautoanchor：不自动检验更新anchors<br>rect：进行矩形训练</p><p>resume：恢复最近保存的模型开始训练</p><p>nosave：仅保存最终checkpoint</p><p>notest：仅测试最后的epoch</p><p>evolve：进化超参数</p><p>bucket：gsutil bucket</p><p>cache-images：缓存图像以加快训练速度</p><p>name： 重命名results.txt to results_name.txt</p><p>adam：使用adam优化</p><p>multi-scale：多尺度训练，img-size +/- 50%</p><p>single-cls：单类别的训练集</p><p>进入pytorch环境，进入yolov5文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train.py --weights weights/yolov5s.pt  --cfg models/cs1.yaml  --data data/mydata.yaml --epoch <span class="number">200</span> --batch-size <span class="number">2</span> --img <span class="number">640</span>   --device <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://api.smain.cn/pics/pic_41c5924e.png" alt="pic_41c5924e.png"></p><p><img src="https://api.smain.cn/pics/pic_a29c2010.png" alt="pic_a29c2010.png"></p><p>问题</p><p>如果出现 winerror 1455 页面太小的问题。</p><p>原因是：如果你装anaconda是在c盘就不会有这个问题，安装到其他的盘，就应该去添加那个盘的虚拟内存。</p><p>打开我的电脑，点开属性，点开高级设计，点开高级，在性能下边点开高级，再点开高级，在虚拟内存下打开更改。把自动管理去掉。点击你安装的盘，根据总的大小来分配</p><p><img src="https://api.smain.cn/pics/pic_4b7dce03.png" alt="pic_4b7dce03.png"></p><h3 id="六-、检测效果">六 、检测效果</h3><h4 id="6-1-训练可视化">6.1 训练可视化</h4><p>训练时或者训练后可以利用 tensorboard 查看训练可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --logdir=runs</span><br></pre></td></tr></table></figure><p><img src="https://api.smain.cn/pics/pic_799b70b5.png" alt="pic_799b70b5.png"></p><p>浏览器输入本地接口地址：</p><p><a href="http://localhost:6006/">http://localhost:6006/</a></p><p><img src="https://api.smain.cn/pics/pic_92828a7f.png" alt="pic_92828a7f.png"></p><p>可以看到各种训练的可视化效果。</p><h4 id="6-2-检测效果">6.2 检测效果</h4><p>检测的命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --source <span class="number">0</span>  <span class="comment"># webcam  自带摄像头</span></span><br><span class="line">                            file.jpg  <span class="comment"># image 图片</span></span><br><span class="line">                            file.mp4  <span class="comment"># video 视频</span></span><br><span class="line">                            path/  <span class="comment"># directory</span></span><br><span class="line">                            path/*.jpg  <span class="comment"># glob</span></span><br><span class="line">                            <span class="string">&#x27;https://youtu.be/NUsoVlDFqZg&#x27;</span>  <span class="comment"># YouTube</span></span><br><span class="line">                            <span class="string">&#x27;rtsp://example.com/media.mp4&#x27;</span>  <span class="comment"># RTSP, RTMP, HTTP stream</span></span><br></pre></td></tr></table></figure><p>640 --device 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[外链图片转存中...(img-GRHY9C34-<span class="number">1671794265513</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[外链图片转存中...(img-slj3QnhL-<span class="number">1671794265513</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**问题**</span><br><span class="line"></span><br><span class="line">如果出现 winerror <span class="number">1455</span> 页面太小的问题。</span><br><span class="line"></span><br><span class="line">原因是：如果你装anaconda是在c盘就不会有这个问题，安装到其他的盘，就应该去添加那个盘的虚拟内存。</span><br><span class="line"></span><br><span class="line">打开我的电脑，点开属性，点开高级设计，点开高级，在性能下边点开高级，再点开高级，在虚拟内存下打开更改。把自动管理去掉。点击你安装的盘，根据总的大小来分配</span><br><span class="line"></span><br><span class="line">[外链图片转存中...(img-npv89HMt-<span class="number">1671794265513</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 六 、检测效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.1 训练可视化</span></span><br><span class="line"></span><br><span class="line">训练时或者训练后可以利用 tensorboard 查看训练可视化</span><br></pre></td></tr></table></figure><p>tensorboard --logdir=runs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[外链图片转存中...(img-exFhmKj8-<span class="number">1671794265514</span>)]</span><br><span class="line"></span><br><span class="line">浏览器输入本地接口地址：</span><br><span class="line"></span><br><span class="line">http://localhost:<span class="number">6006</span>/</span><br><span class="line"></span><br><span class="line">[外链图片转存中...(img-r596wi5X-<span class="number">1671794265514</span>)]</span><br><span class="line"></span><br><span class="line">可以看到各种训练的可视化效果。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.2 检测效果</span></span><br><span class="line"></span><br><span class="line">检测的命令：</span><br></pre></td></tr></table></figure><p>python <a href="http://detect.py">detect.py</a> --source 0 # webcam 自带摄像头<br>file.jpg # image 图片<br>file.mp4 # video 视频<br>path/ # directory<br>path/*.jpg # glob<br>‘<a href="https://youtu.be/NUsoVlDFqZg%E2%80%99">https://youtu.be/NUsoVlDFqZg’</a> # YouTube<br>‘rtsp://example.com/media.mp4’ # RTSP, RTMP, HTTP stream</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python detect.py --weights runs/train/exp11/weights/best.pt --source D:\yolo\yolov5\VOCcs\pig.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;yolov5-（Macre）&quot;&gt;yolov5 （Macre）&lt;/h2&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;h4 id=&quot;文章目录&quot;&gt;文章目录&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yolov5_Macre_0&quot;&gt;yolov5 （Macre）&lt;/a&gt;&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="深度学习" scheme="https://macre.cn/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="yolo" scheme="https://macre.cn/tags/yolo/"/>
    
    <category term="目标识别" scheme="https://macre.cn/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <link href="https://macre.cn/posts/2013454d.html"/>
    <id>https://macre.cn/posts/2013454d.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2022-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">🥧本文汇总Markdown格式以及外挂标签在网页端的渲染效果，可作为文档进行查询</summary>
    
    
    
    <category term="演示" scheme="https://macre.cn/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="Markdown" scheme="https://macre.cn/tags/Markdown/"/>
    
    <category term="外挂标签" scheme="https://macre.cn/tags/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
